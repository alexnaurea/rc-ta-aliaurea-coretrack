import { StepLogger } from '../../../../../core/logger/step-logger';
import { PageHelper } from '../../../../components/html/page-helper';
import { RandomHelper } from '../../../../components/misc-utils/random-helper';
import { DepartmentsHelper } from '../../../../page-objects/pages/administration/organization/departments/departments.helper';
import { DistrictsConstants } from '../../../../page-objects/pages/administration/organization/districts/districts.constants';
import { HomePageHelper } from '../../../../page-objects/pages/home-page/home-page.helper';
import { LoginPageHelper } from '../../../../page-objects/pages/login-page/login-page.helper';
import { SuiteNames } from '../../../helpers/suite-names';

describe(SuiteNames.regressionSuite, () => {
    let loginPageHelper: LoginPageHelper;

    beforeAll(async () => {
        loginPageHelper = LoginPageHelper.getInstance();
        await PageHelper.maximiseBrowser();
    });

    beforeEach(async () => {
        await loginPageHelper.goTo();
        await LoginPageHelper.loginAsAdmin();
    });

    it('To verify that the user is able to navigate to Manage Departments page - [22443927]', async () => {
        // Auto generated by aurea-automation - util on Wed, 03 Apr 2019 01:52:20 GMT

        StepLogger.caseId = 22443927;
        StepLogger.stepId(1);
        StepLogger.step('Click "Administration" link displayed in the left panel.');
        await HomePageHelper.clickAdministrationLink();
        StepLogger.verification('Option available under administration section should be displayed.');
        await HomePageHelper.verifyOptionsUnderAdministration();

        StepLogger.stepId(2);
        StepLogger.step('Click "Organization" displayed under administration.');
        await HomePageHelper.clickOrganizationUnderAdministration();
        StepLogger.verification('Item available under Organization should be displayed.');
        await HomePageHelper.optionsUnderOrganization();

        StepLogger.stepId(3);
        StepLogger.step('Click "Departments"');
        await HomePageHelper.clickDepartmentsUnderOrganization();
        StepLogger.verification('Manage Departments page should be displayed.');
        await DepartmentsHelper.verifyManageDepartmentsPageDisplayed();
    });

    it('To verify Department Edit window is displayed when clicked on department icon next to a department entry - [22443963]', async () => {
        // Auto generated by aurea-automation - util on Wed, 03 Apr 2019 04:45:13 GMT

        StepLogger.caseId = 22443963;
        StepLogger.stepId(1);
        StepLogger.step('Click "Administration" link displayed in the left panel.');
        await HomePageHelper.clickAdministrationLink();
        StepLogger.verification('Option available under administration section should be displayed.');
        await HomePageHelper.verifyOptionsUnderAdministration();

        StepLogger.stepId(2);
        StepLogger.step('Click "Organization" displayed under administration.');
        await HomePageHelper.clickOrganizationUnderAdministration();
        StepLogger.verification('Item available under Organization should be displayed.');
        await HomePageHelper.optionsUnderOrganization();

        StepLogger.stepId(3);
        StepLogger.step('Click "Departments"');
        await HomePageHelper.clickDepartmentsUnderOrganization();
        StepLogger.verification('Manage Departments page should be displayed.');
        await DepartmentsHelper.verifyManageDepartmentsPageDisplayed();

        StepLogger.stepId(4);
        StepLogger.step('Click on department icon next to department entry');
        await DepartmentsHelper.clickOnEditDepartment();
        StepLogger.verification('Edit window is displayed for the department');
        await DepartmentsHelper.verifyEditDepartmentScreen();
    });

    it('To verify user able to edit mandatory fields Code and Name of existing department - [22443985]', async () => {
        // Auto generated by aurea-automation - util on Wed, 03 Apr 2019 06:20:41 GMT

        StepLogger.caseId = 22443985;
        const value = await PageHelper.getUniqueId();

        StepLogger.preCondition('Execute C22443967 to open Department edit window');
        await DepartmentsHelper.navigateToEditDepartmentScreen();

        StepLogger.stepId(1);
        StepLogger.step('Edit the Code field');
        await DepartmentsHelper.enterCode(value);
        StepLogger.verification('User is able to edit code field');
        await DepartmentsHelper.verifyEnteredCode(value);

        StepLogger.stepId(2);
        StepLogger.step('Edit the Name of Department');
        await DepartmentsHelper.enterName(value);
        StepLogger.verification('User is able to edit Name');
        await DepartmentsHelper.verifyEnteredCode(value);

        StepLogger.stepId(3);
        StepLogger.step('Click Save button at bottom of department edit window');
        await DepartmentsHelper.clickOnSave();
        StepLogger.verification('Window is closed and changes are saved');
        await DepartmentsHelper.verifyNewDepartmentScreenClosed();
    });

    it('To verify user able to edit Description of existing department - [22443986]', async () => {
        // Auto generated by aurea-automation - util on Wed, 03 Apr 2019 07:34:05 GMT

        StepLogger.caseId = 22443986;
        const value = await PageHelper.getUniqueId();
        const value1 = await RandomHelper.getRandomNumber(5);

        StepLogger.preCondition('Execute C22443967 to open Department edit window');
        await DepartmentsHelper.navigateToEditDepartmentScreen();

        StepLogger.stepId(1);
        StepLogger.step('Enter some value in description field');
        await DepartmentsHelper.enterDescription(value);
        StepLogger.verification('User is able to enter value in description field');
        await DepartmentsHelper.verifyEnteredDescription(value);

        StepLogger.stepId(2);
        StepLogger.step('Enter numeric value in description field');
        await DepartmentsHelper.enterDescription(value1);
        StepLogger.verification('User is able to enter numeric value');
        await DepartmentsHelper.verifyEnteredDescription(value1);

        StepLogger.stepId(3);
        StepLogger.step('Click Save button at bottom of department edit window');
        await DepartmentsHelper.enterCode(value);
        await DepartmentsHelper.clickOnSave();
        StepLogger.verification('Window is closed and changes are saved');
        await DepartmentsHelper.verifyNewDepartmentScreenClosed();
    });

    it('To verify user able to change status of an inactive department to active - [22443992]', async () => {
        // Auto generated by aurea-automation - util on Wed, 03 Apr 2019 08:05:28 GMT

        StepLogger.caseId = 22443992;
        const activeStatus = DistrictsConstants.activeStatus;
        const inactiveStatus = DistrictsConstants.inactiveStatus;
        const value = await PageHelper.getUniqueId();

        StepLogger.preCondition('Execute C22443967 to open Department edit window');
        await DepartmentsHelper.navigateToEditDepartmentScreen();

        StepLogger.stepId(1);
        StepLogger.step('Click on drop-down of Status field');
        await DepartmentsHelper.clickOnStatusDropDown();
        StepLogger.verification('Active and Inactive values are displayed in the drop-down');
        await DepartmentsHelper.verifyStatusSelected(activeStatus);
        await DepartmentsHelper.verifyStatusSelected(inactiveStatus);

        StepLogger.stepId(2);
        StepLogger.step('Select Active value');
        await DepartmentsHelper.selectAStatusFromDropDown(activeStatus);
        StepLogger.verification('User is able to select active value for drop-down Status');
        await DepartmentsHelper.verifyStatusSelected(activeStatus);

        StepLogger.stepId(3);
        StepLogger.step('Click Save button at bottom of Branch edit window');
        await DepartmentsHelper.enterCode(value);
        await DepartmentsHelper.clickOnSave();
        StepLogger.verification('Window is closed and changes are saved');
        await DepartmentsHelper.verifyNewDepartmentScreenClosed();
    });
});
