import { StepLogger } from '../../../../../core/logger/step-logger';
import { PageHelper } from '../../../../components/html/page-helper';
import { RegionsConstants } from '../../../../page-objects/pages/administration/organization/regions/regions.constants';
import { RegionsHelper } from '../../../../page-objects/pages/administration/organization/regions/regions.helper';
import { HomePageHelper } from '../../../../page-objects/pages/home-page/home-page.helper';
import { HomePage1Helper } from '../../../../page-objects/pages/home-page/home-page1.helper';
import { LoginPageHelper } from '../../../../page-objects/pages/login-page/login-page.helper';
import { SuiteNames } from '../../../helpers/suite-names';

describe(SuiteNames.regressionSuite, () => {
    let loginPageHelper: LoginPageHelper;

    beforeAll(async () => {
        loginPageHelper = LoginPageHelper.getInstance();
        await PageHelper.maximiseBrowser();
    });

    beforeEach(async () => {
        await loginPageHelper.goTo();
        await LoginPageHelper.loginAsAdmin();
    });

    it('To verify that the validation error message is displayed when region code is left blank - [22436910]', async () => {
        // Auto generated by aurea-automation - util on Tue, 26 Mar 2019 10:58:05 GMT

        StepLogger.caseId = 22436910;
        const value = await PageHelper.getUniqueId();
        const error = RegionsConstants.errorMessages.code;

        StepLogger.stepId(1);
        StepLogger.step('Go to  "Administration - >Organization" displayed under administration.');
        await HomePageHelper.clickAdministrationLink();
        await HomePageHelper.clickOrganizationUnderAdministration();
        StepLogger.verification('Item available under Organization should be displayed.');
        await HomePageHelper.verifyOptionsUnderAdministration();

        StepLogger.stepId(2);
        StepLogger.step('Click "Regions"');
        await HomePage1Helper.clickRegionsUnderOrganization();
        StepLogger.verification('Manage Regions should be displayed.');
        await RegionsHelper.verifyManageRegionsPageDisplayed();

        StepLogger.stepId(3);
        StepLogger.step('Click "Add Region"');
        await RegionsHelper.clickOnAddRegion();
        StepLogger.verification('"New region" page should be displayed.');
        await RegionsHelper.verifyNewRegionScreen();

        StepLogger.stepId(4);
        StepLogger.step(`Enter values in all mandatory fields leaving region code field.
        Click "save".`);
        await RegionsHelper.enterName(value);
        await RegionsHelper.clickOnSave();
        StepLogger.verification('Validation Error message should be displayed.');
        await RegionsHelper.verifyErrorMessage(error);
    });

    it('To verify user is able to save an active region. - [22436913]', async () => {
        // Auto generated by aurea-automation - util on Tue, 26 Mar 2019 11:35:41 GMT

        StepLogger.caseId = 22436913;
        const value = await PageHelper.getUniqueId();
        const status = await RegionsConstants.activeStatus;
        StepLogger.preCondition('Execute C22436904 to reach to new region page.');
        await RegionsHelper.navigateToNewRegionsPage();

        StepLogger.stepId(1);
        StepLogger.step('Enter "code"');
        await RegionsHelper.enterCode(value);
        StepLogger.verification('Value should be entered in code field.');
        await RegionsHelper.verifyEnteredCode(value);

        StepLogger.stepId(2);
        StepLogger.step('Enter "name"');
        await RegionsHelper.enterName(value);
        StepLogger.verification('Value should be entered in name field.');
        await RegionsHelper.verifyEnteredName(value);

        StepLogger.stepId(3);
        StepLogger.step('Select Active in status drop down.');
        await RegionsHelper.selectAStatusFromDropDown(status);
        StepLogger.verification('Status should be selected.');
        await RegionsHelper.verifyStatusSelected(status);

        StepLogger.stepId(4);
        StepLogger.step('Click "save"');
        await RegionsHelper.clickOnSave();
        StepLogger.verification('Active region should be saved.');
        await RegionsHelper.verifyNewRegionScreenClosed();
    });

    it('To verify user is able to save an inactive region. - [22436914]', async () => {
        // Auto generated by aurea-automation - util on Tue, 26 Mar 2019 11:50:46 GMT

        StepLogger.caseId = 22436914;
        const value = await PageHelper.getUniqueId();
        const status = await RegionsConstants.inactiveStatus;
        StepLogger.preCondition('Execute C22436904 to reach to new region page.');
        await RegionsHelper.navigateToNewRegionsPage();

        StepLogger.stepId(1);
        StepLogger.step('Enter "code"');
        await RegionsHelper.enterCode(value);
        StepLogger.verification('Value should be entered in code field.');
        await RegionsHelper.verifyEnteredCode(value);

        StepLogger.stepId(2);
        StepLogger.step('Enter "name"');
        await RegionsHelper.enterName(value);
        StepLogger.verification('Value should be entered in name field.');
        await RegionsHelper.verifyEnteredName(value);

        StepLogger.stepId(3);
        StepLogger.step('Select In Active in status drop down.');
        await RegionsHelper.selectAStatusFromDropDown(status);
        StepLogger.verification('Status should be selected.');
        await RegionsHelper.verifyStatusSelected(status);

        StepLogger.stepId(4);
        StepLogger.step('Click "save"');
        await RegionsHelper.clickOnSave();
        StepLogger.verification('In-Active region should be saved.');
        await RegionsHelper.verifyNewRegionScreenClosed();
    });

    it('To verify that the validation error message is displayed when region name is left blank - [22436911]', async () => {
        // Auto generated by aurea-automation - util on Tue, 26 Mar 2019 11:55:13 GMT

        StepLogger.caseId = 22436911;
        const value = await PageHelper.getUniqueId();
        const error = RegionsConstants.errorMessages.name;

        StepLogger.stepId(1);
        StepLogger.step('Go to  "Administration - >Organization" displayed under administration.');
        await HomePageHelper.clickAdministrationLink();
        await HomePageHelper.clickOrganizationUnderAdministration();
        StepLogger.verification('Item available under Organization should be displayed.');
        await HomePageHelper.verifyOptionsUnderAdministration();

        StepLogger.stepId(2);
        StepLogger.step('Click "Regions"');
        await HomePage1Helper.clickRegionsUnderOrganization();
        StepLogger.verification('Manage Regions should be displayed.');
        await RegionsHelper.verifyManageRegionsPageDisplayed();

        StepLogger.stepId(3);
        StepLogger.step('Click "Add Region"');
        await RegionsHelper.clickOnAddRegion();
        StepLogger.verification('"New region" page should be displayed.');
        await RegionsHelper.verifyNewRegionScreen();

        StepLogger.stepId(4);
        StepLogger.step(`Enter values in all mandatory fields leaving region name field.
        Click "save".`);
        await RegionsHelper.enterCode(value);
        await RegionsHelper.clickOnSave();
        StepLogger.verification('Validation Error message should be saved.');
        await RegionsHelper.verifyErrorMessage(error);
    });

    it('To verify that user is able to save a region by entering data in all the fields. - [22436915]', async () => {
        // Auto generated by aurea-automation - util on Tue, 26 Mar 2019 12:12:08 GMT

        StepLogger.caseId = 22436915;
        const value = await PageHelper.getUniqueId();
        const status = await RegionsConstants.inactiveStatus;
        const district = await RegionsConstants.district;

        StepLogger.preCondition('Execute C22436904 to reach to new region page.');
        await RegionsHelper.navigateToNewRegionsPage();

        StepLogger.stepId(1);
        StepLogger.step('Enter "code"');
        await RegionsHelper.enterCode(value);
        StepLogger.verification('Value should be entered in code field.');
        await RegionsHelper.verifyEnteredCode(value);

        StepLogger.stepId(2);
        StepLogger.step('Enter "name"');
        await RegionsHelper.enterName(value);
        StepLogger.verification('Value should be entered in name field.');
        await RegionsHelper.verifyEnteredName(value);

        StepLogger.stepId(3);
        StepLogger.step('Select a value in district drop down.');
        await RegionsHelper.selectADistrictFromDropDown(district);
        StepLogger.verification('Value should be selected.');
        await RegionsHelper.verifyDistrictSelected(district);

        StepLogger.stepId(4);
        StepLogger.step('Enter description.');
        await RegionsHelper.enterDescription(value);
        StepLogger.verification('Description should be entered.');
        await RegionsHelper.verifyEnteredDescription(value);

        StepLogger.stepId(5);
        StepLogger.step('Select a status.');
        await RegionsHelper.selectAStatusFromDropDown(status);
        StepLogger.verification('Status should be selected.');
        await RegionsHelper.verifyStatusSelected(status);

        StepLogger.stepId(6);
        StepLogger.step('Click Save');
        await RegionsHelper.clickOnSave();
        StepLogger.verification('Region should be saved.');
        await RegionsHelper.verifyNewRegionScreenClosed();
    });

    it('To verify the functionality of cancel button on Add new region page. - [22437147]', async () => {
        // Auto generated by aurea-automation - util on Tue, 26 Mar 2019 12:27:11 GMT

        StepLogger.caseId = 22437147;

        StepLogger.stepId(1);
        StepLogger.step('Go to  "Administration - >Organization" displayed under administration.');
        await HomePageHelper.clickAdministrationLink();
        await HomePageHelper.clickOrganizationUnderAdministration();
        StepLogger.verification('Item available under Organization should be displayed.');
        await HomePageHelper.verifyOptionsUnderAdministration();

        StepLogger.stepId(2);
        StepLogger.step('Click "Regions"');
        await HomePage1Helper.clickRegionsUnderOrganization();
        StepLogger.verification('Manage Regions should be displayed.');
        await RegionsHelper.verifyManageRegionsPageDisplayed();

        StepLogger.stepId(3);
        StepLogger.step('Click "Add Region"');
        await RegionsHelper.clickOnAddRegion();
        StepLogger.verification('"New region" page should be displayed.');
        await RegionsHelper.verifyNewRegionScreen();

        StepLogger.stepId(4);
        StepLogger.step('Click "Cancel" button.');
        await RegionsHelper.clickOnCancel();
        StepLogger.verification('"New region" page should be closed and no region is saved.');
        await RegionsHelper.verifyNewRegionScreenClosed();
    });
});
