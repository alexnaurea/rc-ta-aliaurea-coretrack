import { StepLogger } from '../../../../../core/logger/step-logger';

import { PageHelper } from '../../../../components/html/page-helper';
import { RandomHelper } from '../../../../components/misc-utils/random-helper';
import { RegionsConstants } from '../../../../page-objects/pages/administration/organization/regions/regions.constants';
import { RegionsHelper } from '../../../../page-objects/pages/administration/organization/regions/regions.helper';
import { HomePageHelper } from '../../../../page-objects/pages/home-page/home-page.helper';
import { HomePage1Helper } from '../../../../page-objects/pages/home-page/home-page1.helper';
import { LoginPageHelper } from '../../../../page-objects/pages/login-page/login-page.helper';
import { SuiteNames } from '../../../helpers/suite-names';

describe(SuiteNames.regressionSuite, () => {
    let loginPageHelper: LoginPageHelper;

    beforeAll(async () => {
        loginPageHelper = LoginPageHelper.getInstance();
        await PageHelper.maximiseBrowser();
    });

    beforeEach(async () => {
        await loginPageHelper.goTo();
        await LoginPageHelper.loginAsAdmin();
    });

    it('To verify user able to change status of an inactive region to active - [22460733]', async () => {
        // Auto generated by aurea-automation - util on Mon, 01 Apr 2019 01:43:46 GMT

        StepLogger.caseId = 22460733;
        const activeStatus = RegionsConstants.activeStatus;
        const inactiveStatus = RegionsConstants.inactiveStatus;

        StepLogger.preCondition('Execute C22460728 to open region window');
        await RegionsHelper.navigateToEditRegionWindow();

        StepLogger.stepId(1);
        StepLogger.step('Click on drop-down of Status field');
        await RegionsHelper.clickOnStatusDropDown();
        StepLogger.verification('Active and Inactive values are displayed in the drop-down');
        await RegionsHelper.verifyStatusSelected(activeStatus);
        await RegionsHelper.verifyStatusSelected(inactiveStatus);

        StepLogger.stepId(2);
        StepLogger.step('Select Active value');
        await RegionsHelper.selectAStatusFromDropDown(activeStatus);
        StepLogger.verification('User is able to select active value for drop-down Status');
        await RegionsHelper.verifyStatusSelected(activeStatus);

        StepLogger.stepId(3);
        StepLogger.step('Click Save button at bottom of region edit window');
        await RegionsHelper.clickOnSave();
        StepLogger.verification('Window is closed and changes are saved');
        await RegionsHelper.verifyNewRegionScreenClosed();
    });

    it('To verify user able to edit region of an existing region - [22460748]', async () => {
        // Auto generated by aurea-automation - util on Mon, 01 Apr 2019 04:49:14 GMT

        StepLogger.caseId = 22460748;
        const district = RegionsConstants.district;

        StepLogger.preCondition('Execute C22460728 to open region window');
        await RegionsHelper.navigateToEditRegionWindow();

        StepLogger.stepId(1);
        StepLogger.step('Click on region drop-down');
        await RegionsHelper.clickOnDistrictDropDown();
        StepLogger.verification('List of regions is displayed in drop-down');
        await RegionsHelper.verifyDistrictSelected(district);

        StepLogger.stepId(2);
        StepLogger.step('Select a value from drop-down');
        await RegionsHelper.selectADistrictFromDropDown(district);
        StepLogger.verification('Selected value is assigned to region drop-down');
        await RegionsHelper.verifyDistrictSelected(district);

        StepLogger.stepId(3);
        StepLogger.step('Click Save button');
        await RegionsHelper.clickOnSave();
        StepLogger.verification('Window is closed and region is saved');
        await RegionsHelper.verifyNewRegionScreenClosed();
    });

    it('To verify user able to edit Description of existing region - [22460731]', async () => {
        // Auto generated by aurea-automation - util on Mon, 01 Apr 2019 06:06:36 GMT

        StepLogger.caseId = 22460731;
        const value = await PageHelper.getUniqueId();
        const number = await RandomHelper.getRandomNumber(5);

        StepLogger.preCondition('Execute C22460728 to open region window');
        await RegionsHelper.navigateToEditRegionWindow();

        StepLogger.stepId(1);
        StepLogger.step('Enter some value in description field');
        await RegionsHelper.enterDescription(value);
        StepLogger.verification('User is able to enter value in description field');
        await RegionsHelper.verifyEnteredDescription(value);

        StepLogger.stepId(2);
        StepLogger.step('Enter numeric value in description field');
        await RegionsHelper.enterDescription(number);
        StepLogger.verification('User is able to enter numeric value');
        await RegionsHelper.verifyEnteredDescription(number);

        StepLogger.stepId(3);
        StepLogger.step('Click Save button at bottom of region edit window');
        await RegionsHelper.clickOnSave();
        StepLogger.verification('Window is closed and changes are saved');
        await RegionsHelper.verifyNewRegionScreenClosed();
    });

    it('To verify Edit Region window is displayed when double clicked on a region entry - [22460728]', async () => {
        // Auto generated by aurea-automation - util on Mon, 01 Apr 2019 07:31:12 GMT

        StepLogger.caseId = 22460728;

        StepLogger.stepId(1);
        StepLogger.step('Click "Administration" link displayed in the left panel.');
        await HomePageHelper.clickAdministrationLink();
        StepLogger.verification('Option available under administration section should be displayed.');
        await HomePageHelper.verifyOptionsUnderAdministration();

        StepLogger.stepId(2);
        StepLogger.step('Click "Organization" displayed under administration.');
        await HomePageHelper.clickOrganizationUnderAdministration();
        StepLogger.verification('Item available under Organization should be displayed.');
        await HomePageHelper.optionsUnderOrganization();

        StepLogger.stepId(3);
        StepLogger.step('Click "Regions"');
        await HomePage1Helper.clickRegionsUnderOrganization();
        StepLogger.verification('"Manage Regions" should be displayed.');
        await RegionsHelper.verifyManageRegionsPageDisplayed();

        StepLogger.stepId(4);
        StepLogger.step('Double Click on region entry');
        await RegionsHelper.doubleClickOnRegionEntry();
        StepLogger.verification('Edit window is displayed for the region');
        await RegionsHelper.verifyEditRegionScreen();
    });

    it('To verify Cancel button functionality on Edit Region window - [22460734]', async () => {
        // Auto generated by aurea-automation - util on Mon, 01 Apr 2019 08:35:23 GMT

        StepLogger.caseId = 22460734;
        const value = await PageHelper.getUniqueId();
        const inactive = RegionsConstants.inactiveStatus;

        StepLogger.preCondition('Execute C22460728 to open region window');
        await RegionsHelper.navigateToEditRegionWindow();

        StepLogger.stepId(1);
        StepLogger.step('Edit the Code field');
        await RegionsHelper.enterCode(value);
        StepLogger.verification('User is able to Edit code field');
        await RegionsHelper.verifyEnteredCode(value);

        StepLogger.stepId(2);
        StepLogger.step('Change Status to Inactive');
        await RegionsHelper.selectAStatusFromDropDown(inactive);
        StepLogger.verification('User is able to change status to inactive');
        await RegionsHelper.verifyStatusSelected(inactive);

        StepLogger.stepId(3);
        StepLogger.step('Click Cancel button');
        await RegionsHelper.clickOnCancel();
        StepLogger.verification('Edit region window is closed and changes are not saved');
        await RegionsHelper.verifyNewRegionScreenClosed();
    });
});
