import { StepLogger } from '../../../../../core/logger/step-logger';
import { PageHelper } from '../../../../components/html/page-helper';
import { DepartmentsConstants } from '../../../../page-objects/pages/administration/organization/departments/departments.constants';
import { DepartmentsHelper } from '../../../../page-objects/pages/administration/organization/departments/departments.helper';
import { HomePageHelper } from '../../../../page-objects/pages/home-page/home-page.helper';
import { LoginPageHelper } from '../../../../page-objects/pages/login-page/login-page.helper';
import { SuiteNames } from '../../../helpers/suite-names';

describe(SuiteNames.regressionSuite, () => {
    let loginPageHelper: LoginPageHelper;

    beforeAll(async () => {
        loginPageHelper = LoginPageHelper.getInstance();
        await PageHelper.maximiseBrowser();
    });

    beforeEach(async () => {
        await loginPageHelper.goTo();
        await LoginPageHelper.loginAsAdmin();
    });

    it('To verify that user is able to save a department by entering data in all the fields. - [22442004]', async () => {
        // Auto generated by aurea-automation - util on Fri, 22 Mar 2019 10:47:16 GMT

        StepLogger.caseId = 22442004;
        const value = await PageHelper.getUniqueId();
        const activeStatus = DepartmentsConstants.activeStatus;

        StepLogger.preCondition('Execute C22441993 to reach to add department page.');
        await DepartmentsHelper.navigateToAddDepartmentScreen();

        StepLogger.stepId(1);
        StepLogger.step('Enter value in code field.');
        await DepartmentsHelper.enterCode(value);
        StepLogger.verification('It should be entered.');
        await DepartmentsHelper.verifyEnteredCode(value);

        StepLogger.stepId(2);
        StepLogger.step('Enter value in name field.');
        await DepartmentsHelper.enterName(value);
        StepLogger.verification('It should be entered.');
        await DepartmentsHelper.verifyEnteredName(value);

        StepLogger.stepId(3);
        StepLogger.step('Enter description');
        await DepartmentsHelper.enterDescription(value);
        StepLogger.verification('It should be entered.');
        await DepartmentsHelper.verifyEnteredDescription(value);

        StepLogger.stepId(4);
        StepLogger.step('Select Active in Status drop down.');
        await DepartmentsHelper.selectAStatusFromDropDown(activeStatus);
        StepLogger.verification('It should be selected.');
        await DepartmentsHelper.verifyStatusSelected(activeStatus);

        StepLogger.stepId(5);
        StepLogger.step('Click "save"');
        await DepartmentsHelper.clickOnSave();
        StepLogger.verification('An active department should be saved.');
        await DepartmentsHelper.verifyNewDepartmentScreenClosed();
    });

    it('To verify that the validation error message is displayed when all the mandatory fields are left blank. - [22441997]', async () => {
        // Auto generated by aurea-automation - util on Fri, 22 Mar 2019 12:16:12 GMT

        StepLogger.caseId = 22441997;
        const error = DepartmentsConstants.errorMessages.name;

        StepLogger.stepId(1);
        StepLogger.step('Goto  "Administration -> Organization" displayed under administration.');
        await HomePageHelper.clickAdministrationLink();
        StepLogger.verification('Option available under administration section should be displayed.');
        await HomePageHelper.verifyOptionsUnderAdministration();

        StepLogger.stepId(2);
        StepLogger.step('Click "Departments"');
        await HomePageHelper.clickOrganizationUnderAdministration();
        await HomePageHelper.clickDepartmentsUnderOrganization();
        StepLogger.verification('Manage Departments page should be displayed.');
        await DepartmentsHelper.verifyManageDepartmentsPageDisplayed();

        StepLogger.stepId(3);
        StepLogger.step('Click "Add Department"');
        await DepartmentsHelper.clickAddDepartment();
        StepLogger.verification('"New department" page should be displayed.');
        await DepartmentsHelper.verifyNewDepartmentScreen();

        StepLogger.stepId(4);
        StepLogger.step('Click "save" leaving all the fields blank.');
        await DepartmentsHelper.clickOnSave();
        StepLogger.verification('Validation Error message should be displayed.');
        await DepartmentsHelper.verifyValidationErrorMessage(error);
    });

    it('To verify that the validation error message is displayed when code is left blank. - [22441999]', async () => {
        // Auto generated by aurea-automation - util on Fri, 22 Mar 2019 12:40:03 GMT

        StepLogger.caseId = 22441999;
        const value = await PageHelper.getUniqueId();
        const error = DepartmentsConstants.errorMessages.code;

        StepLogger.stepId(1);
        StepLogger.step('Goto  "Administration -> Organization" displayed under administration.');
        await HomePageHelper.clickAdministrationLink();
        StepLogger.verification('Option available under administration section should be displayed.');
        await HomePageHelper.verifyOptionsUnderAdministration();

        StepLogger.stepId(2);
        StepLogger.step('Click "Departments"');
        await HomePageHelper.clickOrganizationUnderAdministration();
        await HomePageHelper.clickDepartmentsUnderOrganization();
        StepLogger.verification('Manage Departments page should be displayed.');
        await DepartmentsHelper.verifyManageDepartmentsPageDisplayed();

        StepLogger.stepId(3);
        StepLogger.step('Click "Add Department"');
        await DepartmentsHelper.clickAddDepartment();
        StepLogger.verification('"New department" page should be displayed.');
        await DepartmentsHelper.verifyNewDepartmentScreen();

        StepLogger.stepId(4);
        StepLogger.step(`Enter value in the name field.
        Click Save.`);
        await DepartmentsHelper.enterName(value);
        await DepartmentsHelper.clickOnSave();
        StepLogger.verification('Validation Error message should be displayed.');
        await DepartmentsHelper.verifyValidationErrorMessage(error);
    });

    it('To verify that the validation error message is displayed when name is left blank. - [22442000]', async () => {
        // Auto generated by aurea-automation - util on Fri, 22 Mar 2019 12:44:21 GMT

        StepLogger.caseId = 22442000;
        const value = await PageHelper.getUniqueId();
        const error = DepartmentsConstants.errorMessages.name;

        StepLogger.stepId(1);
        StepLogger.step('Goto  "Administration -> Organization" displayed under administration.');
        await HomePageHelper.clickAdministrationLink();
        StepLogger.verification('Option available under administration section should be displayed.');
        await HomePageHelper.verifyOptionsUnderAdministration();

        StepLogger.stepId(2);
        StepLogger.step('Click "Departments"');
        await HomePageHelper.clickOrganizationUnderAdministration();
        await HomePageHelper.clickDepartmentsUnderOrganization();
        StepLogger.verification('Manage Departments page should be displayed.');
        await DepartmentsHelper.verifyManageDepartmentsPageDisplayed();

        StepLogger.stepId(3);
        StepLogger.step('Click "Add Department"');
        await DepartmentsHelper.clickAddDepartment();
        StepLogger.verification('"New department" page should be displayed.');
        await DepartmentsHelper.verifyNewDepartmentScreen();

        StepLogger.stepId(4);
        StepLogger.step(`Enter value in code field.
        Click "save".`);
        await DepartmentsHelper.enterCode(value);
        await DepartmentsHelper.clickOnSave();
        StepLogger.verification('Validation Error message should be displayed.');
        await DepartmentsHelper.verifyValidationErrorMessage(error);
    });

    it('To verify user is able to save an active Department. - [22442001]', async () => {
        // Auto generated by aurea-automation - util on Fri, 22 Mar 2019 13:07:56 GMT

        StepLogger.caseId = 22442001;
        const value = await PageHelper.getUniqueId();
        const activeStatus = DepartmentsConstants.activeStatus;

        StepLogger.preCondition('Execute C22441993 to reach to add department page.');
        await DepartmentsHelper.navigateToAddDepartmentScreen();

        StepLogger.stepId(1);
        StepLogger.step('Enter value in code field.');
        await DepartmentsHelper.enterCode(value);
        StepLogger.verification('It should be entered.');
        await DepartmentsHelper.verifyEnteredCode(value);

        StepLogger.stepId(2);
        StepLogger.step('Enter value in name field.');
        await DepartmentsHelper.enterName(value);
        StepLogger.verification('It should be entered.');
        await DepartmentsHelper.verifyEnteredName(value);

        StepLogger.stepId(3);
        StepLogger.step('Select Active in Status drop down.');
        await DepartmentsHelper.selectAStatusFromDropDown(activeStatus);
        StepLogger.verification('It should be selected.');
        await DepartmentsHelper.verifyStatusSelected(activeStatus);

        StepLogger.stepId(4);
        StepLogger.step('Click "save".');
        await DepartmentsHelper.clickOnSave();
        StepLogger.verification('An active department should be saved.');
        await DepartmentsHelper.verifyNewDepartmentScreenClosed();
    });

    it('To verify user is able to save an in active Department. - [22442002]', async () => {
        // Auto generated by aurea-automation - util on Fri, 22 Mar 2019 13:11:54 GMT

        StepLogger.caseId = 22442002;
        const value = await PageHelper.getUniqueId();
        const inactiveStatus = DepartmentsConstants.inactiveStatus;

        StepLogger.preCondition('Execute C22441993 to reach to add department page.');
        await DepartmentsHelper.navigateToAddDepartmentScreen();

        StepLogger.stepId(1);
        StepLogger.step('Enter value in code field.');
        await DepartmentsHelper.enterCode(value);
        StepLogger.verification('It should be entered.');
        await DepartmentsHelper.verifyEnteredCode(value);

        StepLogger.stepId(2);
        StepLogger.step('Enter value in name field.');
        await DepartmentsHelper.enterName(value);
        StepLogger.verification('It should be entered.');
        await DepartmentsHelper.verifyEnteredName(value);

        StepLogger.stepId(3);
        StepLogger.step('Select In-Active in Status drop down.');
        await DepartmentsHelper.selectAStatusFromDropDown(inactiveStatus);
        StepLogger.verification('It should be selected.');
        await DepartmentsHelper.verifyStatusSelected(inactiveStatus);

        StepLogger.stepId(4);
        StepLogger.step('Click "save".');
        await DepartmentsHelper.clickOnSave();
        StepLogger.verification('An In active department should be saved.');
        await DepartmentsHelper.verifyNewDepartmentScreenClosed();
    });
});
