import { StepLogger } from '../../../../../core/logger/step-logger';
import { PageHelper } from '../../../../components/html/page-helper';
import { DistrictsConstants } from '../../../../page-objects/pages/administration/organization/districts/districts.constants';
import { DistrictsHelper } from '../../../../page-objects/pages/administration/organization/districts/districts.helper';
import { HomePageHelper } from '../../../../page-objects/pages/home-page/home-page.helper';
import { HomePage1Helper } from '../../../../page-objects/pages/home-page/home-page1.helper';
import { LoginPageHelper } from '../../../../page-objects/pages/login-page/login-page.helper';
import { SuiteNames } from '../../../helpers/suite-names';

describe(SuiteNames.regressionSuite, () => {
    let loginPageHelper: LoginPageHelper;

    beforeAll(async () => {
        loginPageHelper = LoginPageHelper.getInstance();
        await PageHelper.maximiseBrowser();
    });

    beforeEach(async () => {
        await loginPageHelper.goTo();
        await LoginPageHelper.loginAsAdmin();
    });

    it('To verify that the validation error message is displayed when name is left blank. - [22437199]', async () => {
        // Auto generated by aurea-automation - util on Mon, 25 Mar 2019 08:03:08 GMT

        StepLogger.caseId = 22437199;
        const value = await PageHelper.getUniqueId();
        const error = DistrictsConstants.errorMessages.name;

        StepLogger.stepId(1);
        StepLogger.step('Go to  "Administration -> Organization" displayed under administration.');
        await HomePageHelper.clickAdministrationLink();
        await HomePageHelper.clickOrganizationUnderAdministration();
        StepLogger.verification('Item available under Organization should be displayed.');
        await HomePageHelper.optionsUnderOrganization();

        StepLogger.stepId(2);
        StepLogger.step('Click "Districts"');
        await HomePage1Helper.clickDistrictsUnderOrganization();
        StepLogger.verification('"Manage Districts" should be displayed.');
        await DistrictsHelper.verifyManageDistrictsPageDisplayed();

        StepLogger.stepId(3);
        StepLogger.step('Click "Add District"');
        await DistrictsHelper.clickOnAddDistrict();
        StepLogger.verification('"New district" page should be displayed.');
        await DistrictsHelper.verifyNewDistrictsScreen();

        StepLogger.stepId(4);
        StepLogger.step('Enter code and leave name field blank.');
        await DistrictsHelper.enterCode(value);
        await DistrictsHelper.clickOnSaveButton();
        StepLogger.verification('Validation Error should be displayed.');
        await DistrictsHelper.verifyValidationErrorMessage(error);
    });

    it('To verify that the validation error message is displayed when code is left blank. - [22437197]', async () => {
        // Auto generated by aurea-automation - util on Mon, 25 Mar 2019 08:28:52 GMT

        StepLogger.caseId = 22437197;
        const value = await PageHelper.getUniqueId();
        const error = DistrictsConstants.errorMessages.code;

        StepLogger.stepId(1);
        StepLogger.step('Go to  "Administration -> Organization" displayed under administration.');
        await HomePageHelper.clickAdministrationLink();
        await HomePageHelper.clickOrganizationUnderAdministration();
        StepLogger.verification('Item available under Organization should be displayed.');
        await HomePageHelper.optionsUnderOrganization();

        StepLogger.stepId(2);
        StepLogger.step('Click "Districts"');
        await HomePage1Helper.clickDistrictsUnderOrganization();
        StepLogger.verification('"Manage Districts" should be displayed.');
        await DistrictsHelper.verifyManageDistrictsPageDisplayed();

        StepLogger.stepId(3);
        StepLogger.step('Click "Add District"');
        await DistrictsHelper.clickOnAddDistrict();
        StepLogger.verification('"New district" page should be displayed.');
        await DistrictsHelper.verifyNewDistrictsScreen();

        StepLogger.stepId(4);
        StepLogger.step('Enter name and Click "save"');
        await DistrictsHelper.enterName(value);
        await DistrictsHelper.clickOnSaveButton();
        StepLogger.verification('Validation Error message should be displayed.');
        await DistrictsHelper.verifyValidationErrorMessage(error);
    });

    it('To verify that the validation error message is displayed when all the mandatory fields are left blank. - [22437196]', async () => {
        // Auto generated by aurea-automation - util on Mon, 25 Mar 2019 08:36:29 GMT

        StepLogger.caseId = 22437196;
        const error = DistrictsConstants.errorMessages.code;

        StepLogger.stepId(1);
        StepLogger.step('Go to  "Administration -> Organization" displayed under administration.');
        await HomePageHelper.clickAdministrationLink();
        await HomePageHelper.clickOrganizationUnderAdministration();
        StepLogger.verification('Item available under Organization should be displayed.');
        await HomePageHelper.optionsUnderOrganization();

        StepLogger.stepId(2);
        StepLogger.step('Click "Districts"');
        await HomePage1Helper.clickDistrictsUnderOrganization();
        StepLogger.verification('"Manage Districts" should be displayed.');
        await DistrictsHelper.verifyManageDistrictsPageDisplayed();

        StepLogger.stepId(3);
        StepLogger.step('Click "Add District"');
        await DistrictsHelper.clickOnAddDistrict();
        StepLogger.verification('"New district" page should be displayed.');
        await DistrictsHelper.verifyNewDistrictsScreen();

        StepLogger.stepId(4);
        StepLogger.step('Click "save"');
        await DistrictsHelper.clickOnSaveButton();
        StepLogger.verification('Validation Error message should be displayed.');
        await DistrictsHelper.verifyValidationErrorMessage(error);
    });

    it('To verify that user is able to save a district by entering data in all the fields. - [22437202]', async () => {
        // Auto generated by aurea-automation - util on Mon, 25 Mar 2019 11:17:00 GMT

        StepLogger.caseId = 22437202;
        const value = await PageHelper.getUniqueId();
        const status = await DistrictsConstants.activeStatus;

        StepLogger.preCondition('Execute C22437193 to navigate to add district page.');
        await DistrictsHelper.navigateToAddDistrictPage();

        StepLogger.stepId(1);
        StepLogger.step('Enter Code.');
        await DistrictsHelper.enterCode(value);
        StepLogger.verification('Code should be entered.');
        await DistrictsHelper.verifyEnteredCode(value);

        StepLogger.stepId(2);
        StepLogger.step('Enter Name.');
        await DistrictsHelper.enterName(value);
        StepLogger.verification('Name should be entered.');
        await DistrictsHelper.verifyEnteredName(value);

        StepLogger.stepId(3);
        StepLogger.step('Enter description.');
        await DistrictsHelper.enterDescription(value);
        StepLogger.verification('Description should be entered.');
        await DistrictsHelper.verifyEnteredDescription(value);

        StepLogger.stepId(4);
        StepLogger.step('Select "Active" in status field.');
        await DistrictsHelper.selectAStatusFromDropDown(status);
        StepLogger.verification('It should be selected.');
        await DistrictsHelper.verifyStatusSelected(status);

        StepLogger.stepId(5);
        StepLogger.step('Click "save"');
        await DistrictsHelper.clickOnSaveButton();
        StepLogger.verification('District should be saved.');
        await DistrictsHelper.verifyNewDistrictsScreenClosed();
    });

    it('To verify user is able to save an in- active district. - [22437201]', async () => {
        // Auto generated by aurea-automation - util on Mon, 25 Mar 2019 11:37:41 GMT

        StepLogger.caseId = 22437201;
        const value = await PageHelper.getUniqueId();
        const status = await DistrictsConstants.inactiveStatus;

        StepLogger.preCondition('Execute C22437193 to navigate to add district page.');
        await DistrictsHelper.navigateToAddDistrictPage();

        StepLogger.stepId(1);
        StepLogger.step('Enter Code.');
        await DistrictsHelper.enterCode(value);
        StepLogger.verification('Code should be entered.');
        await DistrictsHelper.verifyEnteredCode(value);

        StepLogger.stepId(2);
        StepLogger.step('Enter Name.');
        await DistrictsHelper.enterName(value);
        StepLogger.verification('Name should be entered.');
        await DistrictsHelper.verifyEnteredName(value);

        StepLogger.stepId(3);
        StepLogger.step('Select "in Active" in status field.');
        await DistrictsHelper.selectAStatusFromDropDown(status);
        StepLogger.verification('It should be selected.');
        await DistrictsHelper.verifyStatusSelected(status);

        StepLogger.stepId(4);
        StepLogger.step('Click "save"');
        await DistrictsHelper.clickOnSaveButton();
        StepLogger.verification('District should be saved.');
        await DistrictsHelper.verifyNewDistrictsScreenClosed();
    });

    it('To verify user is able to save an active District. - [22437200]', async () => {
        // Auto generated by aurea-automation - util on Mon, 25 Mar 2019 12:34:15 GMT

        StepLogger.caseId = 22437200;
        const value = await PageHelper.getUniqueId();
        const status = await DistrictsConstants.activeStatus;

        StepLogger.preCondition('Execute C22437193 to navigate to add district page.');
        await DistrictsHelper.navigateToAddDistrictPage();

        StepLogger.stepId(1);
        StepLogger.step('Enter Code.');
        await DistrictsHelper.enterCode(value);
        StepLogger.verification('Code should be entered.');
        await DistrictsHelper.verifyEnteredCode(value);

        StepLogger.stepId(2);
        StepLogger.step('Enter Name.');
        await DistrictsHelper.enterName(value);
        StepLogger.verification('Name should be entered.');
        await DistrictsHelper.verifyEnteredName(value);

        StepLogger.stepId(3);
        StepLogger.step('Select "Active" in status field.');
        await DistrictsHelper.selectAStatusFromDropDown(status);
        StepLogger.verification('It should be selected.');
        await DistrictsHelper.verifyStatusSelected(status);

        StepLogger.stepId(4);
        StepLogger.step('Click "save"');
        await DistrictsHelper.clickOnSaveButton();
        StepLogger.verification('District should be saved.');
        await DistrictsHelper.verifyNewDistrictsScreenClosed();
    });
});
