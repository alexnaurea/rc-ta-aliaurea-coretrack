import { StepLogger } from '../../../../../core/logger/step-logger';
import { PageHelper } from '../../../../components/html/page-helper';
import { BranchesConstants } from '../../../../page-objects/pages/administration/organization/branches/branches.constants';
import { BranchesHelper } from '../../../../page-objects/pages/administration/organization/branches/branches.helper';
import { LoginPageHelper } from '../../../../page-objects/pages/login-page/login-page.helper';
import { SuiteNames } from '../../../helpers/suite-names';

describe(SuiteNames.regressionSuite, () => {
    let loginPageHelper: LoginPageHelper;

    beforeAll(async () => {
        loginPageHelper = LoginPageHelper.getInstance();
        await PageHelper.maximiseBrowser();
    });

    beforeEach(async () => {
        await loginPageHelper.goTo();
        await LoginPageHelper.loginAsAdmin();
    });

    it('To verify user able to edit Description of an existing branch - [22442995]', async () => {
        // Auto generated by aurea-automation - util on Fri, 05 Apr 2019 12:33:22 GMT

        StepLogger.caseId = 22442995;
        const value = await PageHelper.getUniqueId();

        StepLogger.preCondition('Execute C22442960 to navigate to Manage Branches page');
        await BranchesHelper.navigateToEditBranchesPage();

        StepLogger.stepId(1);
        StepLogger.step('Edit the description of branch');
        await BranchesHelper.enterDescription(value);
        StepLogger.verification('User is able to edit description of branch');
        await BranchesHelper.verifyEnteredDescription(value);

        StepLogger.stepId(2);
        StepLogger.step('Click Save button at bottom of Branch edit window');
        await BranchesHelper.clickOnSave();
        StepLogger.verification('Window is closed and changes are saved');
        await BranchesHelper.verifyNewBranchScreenClosed();

        StepLogger.stepId(3);
        StepLogger.step('Double click on same branch entry to open edit branch window and verify changes are saved for description edited in step 1');
        await BranchesHelper.doubleClickOnBranchEntry();
        StepLogger.verification('User is able to open branch edit window and changes to description field are seen');
        await BranchesHelper.verifyEnteredDescription(value);
    });

    it('To verify user able to change status of an active branch to inactive - [22442997]', async () => {
        // Auto generated by aurea-automation - util on Fri, 05 Apr 2019 16:12:40 GMT

        StepLogger.caseId = 22442997;

        StepLogger.preCondition('Execute C22442960 to navigate to Manage Branches page');
        await BranchesHelper.navigateToEditBranchesPage();
        const active = BranchesConstants.activeStatus;
        const inactive = BranchesConstants.inactiveStatus;

        StepLogger.stepId(1);
        StepLogger.step('Click on drop-down of Status field');
        await BranchesHelper.clickOnStatusDropDown();
        StepLogger.verification('Active and Inactive values are displayed isn the drop-down');
        await BranchesHelper.verifyStatusSelected(active);
        await BranchesHelper.verifyStatusSelected(inactive);

        StepLogger.stepId(2);
        StepLogger.step('Select Inactive value');
        await BranchesHelper.selectAStatusFromDropDown(inactive);
        StepLogger.verification('User is able to select Inactive value for drop-down Status');
        await BranchesHelper.verifyStatusSelected(inactive);

        StepLogger.stepId(3);
        StepLogger.step('Click Save button at bottom of Branch edit window');
        await BranchesHelper.clickOnSave();
        StepLogger.verification('Window is closed and changes are saved');
        await BranchesHelper.verifyNewBranchScreenClosed();
    });

    it('To verify user able to edit Region of an existing branch - [22442980]', async () => {
        // Auto generated by aurea-automation - util on Fri, 05 Apr 2019 16:36:58 GMT

        StepLogger.caseId = 22442980;
        const region = BranchesConstants.defaultRegion;

        StepLogger.preCondition('Execute C22442960 to navigate to Manage Branches page');
        await BranchesHelper.navigateToEditBranchesPage();

        StepLogger.stepId(1);
        StepLogger.step('Click on Region drop-down field in edit branch window');
        await BranchesHelper.clickOnRegionDropDown();
        StepLogger.verification('Drop-down is displayed');
        await BranchesHelper.verifyRegionDropDown();

        StepLogger.stepId(2);
        StepLogger.step('Select another value from region dropdown');
        await BranchesHelper.selectARegionFromDropDown(region);
        StepLogger.verification('User is able to select the value from region drop-down');
        await BranchesHelper.verifyRegionSelected(region);

        StepLogger.stepId(3);
        StepLogger.step('Click Save button at bottom of Branch edit window');
        await BranchesHelper.clickOnSave();
        StepLogger.verification('Window is closed and changes are saved');
        await BranchesHelper.verifyNewBranchScreenClosed();
    });
});
