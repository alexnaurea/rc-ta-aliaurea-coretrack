import { StepLogger } from '../../../../../core/logger/step-logger';
import { PageHelper } from '../../../../components/html/page-helper';
import { RandomHelper } from '../../../../components/misc-utils/random-helper';
import { BranchesConstants } from '../../../../page-objects/pages/administration/organization/branches/branches.constants';
import { BranchesHelper } from '../../../../page-objects/pages/administration/organization/branches/branches.helper';
import { HomePage1Helper } from '../../../../page-objects/pages/home-page/home-page1.helper';
import { LoginPageHelper } from '../../../../page-objects/pages/login-page/login-page.helper';
import { SuiteNames } from '../../../helpers/suite-names';

describe(SuiteNames.regressionSuite, () => {
    let loginPageHelper: LoginPageHelper;

    beforeAll(async () => {
        loginPageHelper = LoginPageHelper.getInstance();
        await PageHelper.maximiseBrowser();
    });

    beforeEach(async () => {
        await loginPageHelper.goTo();
        await LoginPageHelper.loginAsAdmin();
    });

    it('To verify Manage Branches page - [22442961]', async () => {
        // Auto generated by aurea-automation - util on Thu, 04 Apr 2019 11:30:18 GMT

        StepLogger.caseId = 22442961;
        const groupingOption = BranchesConstants.newBranchScreenProperties.region;

        StepLogger.preCondition('Execute C22442960 to navigate to Manage Branches page');
        await HomePage1Helper.navigateToBranchesPage();

        StepLogger.stepId(1);
        StepLogger.step('Verify the buttons present on Manage Branches page');
        StepLogger.verification(`Below buttons are present :
        - Add Branch
        - Refresh
        - Export to Excel
        - Export to word`);
        await BranchesHelper.verifyButtons();

        StepLogger.stepId(2);
        StepLogger.step('Verify the options present in Grouping drop-down');
        StepLogger.verification('User is presented with Region option');
        await BranchesHelper.verifyValuesInGroupingDropDown(groupingOption);

        StepLogger.stepId(3);
        StepLogger.step('Verify the columns present on Manage Branches page');
        StepLogger.verification(`Below columns are present :
        - Branch
        - Branch Code
        - Region
        - City
        - State
        - Phone
        - Active`);
        await BranchesHelper.verifyBranchesPageItemsGrid();
    });

    it('To verify user able to edit Mandatory fields Code and Name of existing branch - [22442971]', async () => {
        // Auto generated by aurea-automation - util on Thu, 04 Apr 2019 12:14:54 GMT

        StepLogger.caseId = 22442971;
        const value = await PageHelper.getUniqueId();

        StepLogger.preCondition('Execute C22442960 to navigate to Manage Branches page');
        await BranchesHelper.navigateToEditBranchesPage();

        StepLogger.stepId(1);
        StepLogger.step('Edit the Code field');
        await BranchesHelper.enterCode(value);
        StepLogger.verification('User is able to Edit code field');
        await BranchesHelper.verifyEnteredCode(value);

        StepLogger.stepId(2);
        StepLogger.step('Edit the Name field');
        await BranchesHelper.enterName(value);
        StepLogger.verification('User is able to Edit name field');
        await BranchesHelper.verifyEnteredName(value);

        StepLogger.stepId(3);
        StepLogger.step('Click Save button at bottom of Branch edit window');
        await BranchesHelper.clickOnSave();
        StepLogger.verification('Window is closed and changes are saved');
        await BranchesHelper.verifyNewBranchScreenClosed();
    });

    it('To verify user able to edit Address related fields of an existing branch - [22442991]', async () => {
        // Auto generated by aurea-automation - util on Thu, 04 Apr 2019 12:35:04 GMT

        StepLogger.caseId = 22442991;
        const value = await PageHelper.getUniqueId();
        const value1 = await RandomHelper.getRandomString(2);

        StepLogger.preCondition('Execute C22442960 to navigate to Manage Branches page');
        await BranchesHelper.navigateToEditBranchesPage();

        // step 1 and 2 covered in step 3
        StepLogger.stepId(1);
        StepLogger.step('Edit Address1 field');
        StepLogger.verification('User is able to edit address1 field');

        StepLogger.stepId(2);
        StepLogger.step('Edit Address2 field');
        StepLogger.verification('User is able to edit address2 field');

        StepLogger.stepId(3);
        StepLogger.step('Edit City, State, Zip and Country');
        await BranchesHelper.enterValuesInAllAddressFields(value, value1);
        StepLogger.verification('User is able to edit City, state, Zip and Country');
        await BranchesHelper.verifyEnteredAdresses(value, value1);

        StepLogger.stepId(4);
        StepLogger.step('Click Save button at bottom of Branch edit window');
        await BranchesHelper.clickOnSave();
        StepLogger.verification('Window is closed and changes are saved');
        await BranchesHelper.verifyNewBranchScreenClosed();
    });

    it('To verify user able to edit phone and fax of an existing branch - [22442994]', async () => {
        // Auto generated by aurea-automation - util on Thu, 04 Apr 2019 16:52:27 GMT

        StepLogger.caseId = 22442994;
        const value = await PageHelper.getUniqueId();

        StepLogger.preCondition('Execute C22442960 to navigate to Manage Branches page');
        await BranchesHelper.navigateToEditBranchesPage();

        StepLogger.stepId(1);
        StepLogger.step('Edit Primary phone field');
        await BranchesHelper.enterPhoneNumber(value);
        StepLogger.verification('User is able to edit primary phone');
        await BranchesHelper.verifyEnteredPhoneNumber(value);

        StepLogger.stepId(2);
        StepLogger.step('Edit the field Fax');
        await BranchesHelper.enterFax(value);
        StepLogger.verification('User is able to edit Fax');
        await BranchesHelper.verifyEnteredFax(value);

        StepLogger.stepId(3);
        StepLogger.step('Click Save button at bottom of Branch edit window');
        await BranchesHelper.clickOnSave();
        StepLogger.verification('Window is closed and changes are saved');
        await BranchesHelper.verifyNewBranchScreenClosed();
    });

    it('To verify user able to change status of an inactive branch to active - [22442999]', async () => {
        // Auto generated by aurea-automation - util on Thu, 04 Apr 2019 17:01:21 GMT

        StepLogger.caseId = 22442999;
        const active = BranchesConstants.activeStatus;
        const inactive = BranchesConstants.inactiveStatus;

        StepLogger.preCondition('Execute C22442960 to navigate to Manage Branches page');
        await BranchesHelper.navigateToEditBranchesPage();

        StepLogger.stepId(1);
        StepLogger.step('Click on drop-down of Status field');
        await BranchesHelper.clickOnStatusDropDown();
        StepLogger.verification('Active and Inactive values are displayed in the drop-down');
        await BranchesHelper.verifyStatusSelected(active);
        await BranchesHelper.verifyStatusSelected(inactive);

        StepLogger.stepId(2);
        StepLogger.step('Select Active value');
        await BranchesHelper.selectAStatusFromDropDown(active);
        StepLogger.verification('User is able to select active value for drop-down Status');
        await BranchesHelper.verifyStatusSelected(active);

        StepLogger.stepId(3);
        StepLogger.step('Click Save button at bottom of Branch edit window');
        await BranchesHelper.clickOnSave();
        StepLogger.verification('Window is closed and changes are saved');
        await BranchesHelper.verifyNewBranchScreenClosed();
    });
});
