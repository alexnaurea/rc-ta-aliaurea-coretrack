import { StepLogger } from '../../../../core/logger/step-logger';
import { PageHelper } from '../../../components/html/page-helper';
import { Constants } from '../../../components/misc-utils/constants';
import { RandomHelper } from '../../../components/misc-utils/random-helper';
import { AccountConstants } from '../../../page-objects/pages/accounts/accounts.constant';
import { AccountsPageHelper } from '../../../page-objects/pages/accounts/accounts.helper';
import { HomePage1Helper } from '../../../page-objects/pages/home-page/home-page1.helper';
import { LoginPageHelper } from '../../../page-objects/pages/login-page/login-page.helper';
import { SuiteNames } from '../../helpers/suite-names';

describe(SuiteNames.regressionSuite, () => {
    let loginPageHelper: LoginPageHelper;

    beforeAll(async () => {
        loginPageHelper = LoginPageHelper.getInstance();
        await PageHelper.maximiseBrowser();
    });

    beforeEach(async () => {
        await PageHelper.restartBrowser();
        await loginPageHelper.goTo();
    });

    // Jira References - COTRAC-3208
    it('To verify that user can save case with Priority "normal" and status "Open-Waiting on customer" - [22945999]', async () => {
        // Auto generated by aurea-automation - util on Mon, 25 Mar 2019 09:28:04 GMT

        StepLogger.caseId = 22945999;
        StepLogger.preCondition('Log in and navigate to Production page and open an account ');
        await LoginPageHelper.loginAsAdmin();
        await AccountsPageHelper.navigateToProductionTabAndOpenAnAccount();

        StepLogger.stepId(1);
        StepLogger.step('Go to Cases tab.');
        await AccountsPageHelper.clickOnCasesTab();
        StepLogger.verification('Case page should be displayed.');
        await AccountsPageHelper.verifyCasesListDisplayed();

        StepLogger.stepId(2);
        StepLogger.step('Click "Add Case".');
        await AccountsPageHelper.clickOnAddCaseButton();
        StepLogger.verification('New case should be displayed.');
        await AccountsPageHelper.verifyNewCasePageTitle();

        StepLogger.stepId(3);
        StepLogger.step('Enter Subject.');
        const subject = RandomHelper.getRandomString();
        await AccountsPageHelper.typeCaseSubject(subject);
        StepLogger.verification('It should be entered.');
        await AccountsPageHelper.verifyCaseSubject(subject);

        StepLogger.stepId(4);
        StepLogger.step('Enter description.');
        const description = RandomHelper.getRandomString();
        await AccountsPageHelper.typeDescription(description);
        StepLogger.verification('It should be entered.');
        await AccountsPageHelper.verifyDescription(description);

        StepLogger.stepId(5);
        StepLogger.step('Select a category and a sub category.');
        const category = await AccountsPageHelper.selectCategoryByIndex(Constants.number.two);
        const subCategory = await AccountsPageHelper.selectSubCategoryByIndex(Constants.number.two);
        StepLogger.verification('It should be selected.');
        await AccountsPageHelper.verifySelectedCategory(category);
        await AccountsPageHelper.verifySelectedSubCategory(subCategory);

        StepLogger.stepId(6);
        StepLogger.step('Select "Normal" in priority field.');
        await AccountsPageHelper.selectPriority(AccountConstants.priorityValues.normal);
        StepLogger.verification('It should be selected.');
        await AccountsPageHelper.verifySelectedPriority(AccountConstants.priorityValues.normal);

        StepLogger.stepId(7);
        StepLogger.step('Select  "Open-Waiting on customer" in status field.');
        await AccountsPageHelper.selectStatus(AccountConstants.status.openWaitingOnCustomer);
        StepLogger.verification('It should be selected.');
        await AccountsPageHelper.verifySelectedStatus(AccountConstants.status.openWaitingOnCustomer);

        StepLogger.stepId(8);
        StepLogger.step('Click "save".');
        await AccountsPageHelper.clickOnSaveButton();
        StepLogger.verification('Case should be saved.');
        await AccountsPageHelper.verifyNoValidationRequiredFieldMessageDisplayed();

        StepLogger.stepId(9);
        StepLogger.step('Verify that case is also displayed in case tab.');
        StepLogger.verification('It should be displayed.');
        await AccountsPageHelper.verifyCaseFromCasesPageDisplayed(subject);
    });

    // Jira References - COTRAC-3295
    it('To verify that user is able to un group. - [22946050]', async () => {
        // Auto generated by aurea-automation - util on Mon, 25 Mar 2019 09:28:04 GMT

        StepLogger.caseId = 22946050;
        StepLogger.preCondition('Log in and navigate to Production page and open an account ');
        await LoginPageHelper.loginAsAdmin();
        await AccountsPageHelper.navigateToProductionTabAndOpenAnAccount();

        StepLogger.stepId(1);
        StepLogger.step('Go to Cases tab');
        await AccountsPageHelper.clickOnCasesTab();
        StepLogger.verification('Case tab should be displayed.');
        await AccountsPageHelper.verifyCasesListDisplayed();

        StepLogger.stepId(2);
        StepLogger.step('Select Status in grouping drop down.');
        await AccountsPageHelper.selectGroupingOption(AccountConstants.groupingOptions.status);
        StepLogger.verification('The list of cases should be grouped by status.');
        await AccountsPageHelper.verifyRecordsGrouped();

        StepLogger.stepId(3);
        StepLogger.step('Select "No grouping" in grouping drop down.');
        await AccountsPageHelper.selectGroupingOption(AccountConstants.groupingOptions.noGrouping);
        StepLogger.verification('The list should be un grouped.');
        await AccountsPageHelper.verifyRecordsUngrouped();
    });

    // Jira References - COTRAC-3340
    it('To verify that validation error message is displayed when subject field is left blank on new cases page. - [22945997]', async () => {
        // Auto generated by aurea-automation - util on Mon, 25 Mar 2019 09:28:04 GMT

        StepLogger.caseId = 22945997;
        StepLogger.preCondition('Log in and navigate to Production page and open an account ');
        await LoginPageHelper.loginAsAdmin();
        await AccountsPageHelper.navigateToProductionTabAndOpenAnAccount();

        StepLogger.stepId(1);
        StepLogger.step('Go to Cases tab.');
        await AccountsPageHelper.clickOnCasesTab();
        StepLogger.verification('Case page should be displayed.');
        await AccountsPageHelper.verifyCasesListDisplayed();

        StepLogger.stepId(2);
        StepLogger.step('Click "Add Case".');
        await AccountsPageHelper.clickOnAddCaseButton();
        StepLogger.verification('New case should be displayed.');
        await AccountsPageHelper.verifyNewCasePageTitle();

        StepLogger.stepId(3);
        StepLogger.step('Enter description.');
        const description = RandomHelper.getRandomString();
        await AccountsPageHelper.typeDescription(description);
        StepLogger.verification('It should be entered.');
        await AccountsPageHelper.verifyDescription(description);

        StepLogger.stepId(4);
        StepLogger.step('Select a category.');
        const category = await AccountsPageHelper.selectCategoryByIndex(Constants.number.two);
        StepLogger.verification('It should be selected.');
        await AccountsPageHelper.verifySelectedCategory(category);

        StepLogger.stepId(5);
        StepLogger.step('Click "save".');
        await AccountsPageHelper.clickOnSaveButton();
        StepLogger.verification('Validation Error message should be displayed.');
        await AccountsPageHelper.verifyValidationRequiredFieldMessageDisplayed();
    });

    // Jira References - COTRAC-3341
    it('To verify that validation error message is displayed when description field is left blank on new cases page. - [22945994]', async () => {
        // Auto generated by aurea-automation - util on Mon, 25 Mar 2019 09:28:04 GMT

        StepLogger.caseId = 22945994;
        StepLogger.preCondition('Log in and navigate to Production page and open an account ');
        await LoginPageHelper.loginAsAdmin();
        await AccountsPageHelper.navigateToProductionTabAndOpenAnAccount();

        StepLogger.stepId(1);
        StepLogger.step('Go to Cases tab.');
        await AccountsPageHelper.clickOnCasesTab();
        StepLogger.verification('Case page should be displayed.');
        await AccountsPageHelper.verifyCasesListDisplayed();

        StepLogger.stepId(2);
        StepLogger.step('Click "Add Case".');
        await AccountsPageHelper.clickOnAddCaseButton();
        StepLogger.verification('New case should be displayed.');
        await AccountsPageHelper.verifyNewCasePageTitle();

        StepLogger.stepId(3);
        StepLogger.step('Enter a subject.');
        const subject = RandomHelper.getRandomString();
        await AccountsPageHelper.typeCaseSubject(subject);
        StepLogger.verification('It should be entered.');
        await AccountsPageHelper.verifyCaseSubject(subject);

        StepLogger.stepId(4);
        StepLogger.step('Select a category.');
        const category = await AccountsPageHelper.selectCategoryByIndex(Constants.number.two);
        StepLogger.verification('Category should be selected.');
        await AccountsPageHelper.verifySelectedCategory(category);

        StepLogger.stepId(5);
        StepLogger.step('Click "save".');
        await AccountsPageHelper.clickOnSaveButton();
        StepLogger.verification('Validation Error message should be displayed.');
        await AccountsPageHelper.verifyValidationRequiredFieldMessageDisplayed();
    });

    // Jira References - COTRAC-3342
    it('To verify that user is able to access "New Cases" page. - [22945988]', async () => {
        // Auto generated by aurea-automation - util on Mon, 25 Mar 2019 09:28:04 GMT

        StepLogger.caseId = 22945988;
        StepLogger.preCondition('Log in to the application ');
        await LoginPageHelper.loginAsAdmin();

        StepLogger.stepId(1);
        StepLogger.step('Go to "Opportunities ->Production"');
        await HomePage1Helper.navigateToProductionPage();
        StepLogger.verification('List of accounts with there production type should be displayed.');
        await AccountsPageHelper.verifyAccountsListDisplayed();

        StepLogger.stepId(2);
        StepLogger.step('Click on any account listed there.');
        await AccountsPageHelper.clickOnAnAccount();
        StepLogger.verification('Accounts detail should be displayed.');
        await AccountsPageHelper.verifyAccountDetailsPageDisplayed();

        StepLogger.stepId(3);
        StepLogger.step('Go to Cases tab.');
        await AccountsPageHelper.clickOnCasesTab();
        StepLogger.verification('Case page should be displayed.');
        await AccountsPageHelper.verifyCasesListDisplayed();

        StepLogger.stepId(4);
        StepLogger.step('Click "Add Case".');
        await AccountsPageHelper.clickOnAddCaseButton();
        StepLogger.verification('New case should be displayed.');
        await AccountsPageHelper.verifyNewCasePageTitle();
    });

    // Jira References - COTRAC-3343
    it('To verify that validation error message is displayed when category field is left blank on new cases page. - [22945996]', async () => {
        // Auto generated by aurea-automation - util on Mon, 25 Mar 2019 09:28:04 GMT

        StepLogger.caseId = 22945996;
        StepLogger.preCondition('Log in and navigate to Production page and open an account ');
        await LoginPageHelper.loginAsAdmin();
        await AccountsPageHelper.navigateToProductionTabAndOpenAnAccount();

        StepLogger.stepId(1);
        StepLogger.step('Go to Cases tab.');
        await AccountsPageHelper.clickOnCasesTab();
        StepLogger.verification('Case page should be displayed.');
        await AccountsPageHelper.verifyCasesListDisplayed();

        StepLogger.stepId(2);
        StepLogger.step('Click "Add Case".');
        await AccountsPageHelper.clickOnAddCaseButton();
        StepLogger.verification('New case should be displayed.');
        await AccountsPageHelper.verifyNewCasePageTitle();

        StepLogger.stepId(3);
        StepLogger.step('Enter a subject.');
        const subject = RandomHelper.getRandomString();
        await AccountsPageHelper.typeCaseSubject(subject);
        StepLogger.verification('It should be entered.');
        await AccountsPageHelper.verifyCaseSubject(subject);

        StepLogger.stepId(4);
        StepLogger.step('Enter description.');
        const description = RandomHelper.getRandomString();
        await AccountsPageHelper.typeDescription(description);
        StepLogger.verification('It should be entered.');
        await AccountsPageHelper.verifyDescription(description);

        StepLogger.stepId(5);
        StepLogger.step('Click "save".');
        await AccountsPageHelper.clickOnSaveButton();
        StepLogger.verification('Validation Error message should be displayed.');
        await AccountsPageHelper.verifyValidationRequiredFieldMessageDisplayed();
    });

    // Jira References - COTRAC-3344
    it('To verify that user can save case with Priority "Emergency" and status "Resolved". - [22946034]', async () => {
        // Auto generated by aurea-automation - util on Mon, 25 Mar 2019 09:28:04 GMT

        StepLogger.caseId = 22946034;
        StepLogger.preCondition('Sign in');
        await LoginPageHelper.loginAsAdmin();

        StepLogger.stepId(1);
        StepLogger.step('Go to Cases tab-> Add case.');
        await AccountsPageHelper.navigateToNewCasePage();
        StepLogger.verification('New case should be displayed.');
        await AccountsPageHelper.verifyNewCasePageTitle();

        StepLogger.stepId(2);
        StepLogger.step('Enter Subject.');
        const subject = RandomHelper.getRandomString();
        await AccountsPageHelper.typeCaseSubject(subject);
        StepLogger.verification('It should be entered.');
        await AccountsPageHelper.verifyCaseSubject(subject);

        StepLogger.stepId(3);
        StepLogger.step('Enter description.');
        const description = RandomHelper.getRandomString();
        await AccountsPageHelper.typeDescription(description);
        StepLogger.verification('It should be entered.');
        await AccountsPageHelper.verifyDescription(description);

        StepLogger.stepId(4);
        StepLogger.step('Select a category and a sub category.');
        const category = await AccountsPageHelper.selectCategoryByIndex(Constants.number.two);
        const subCategory = await AccountsPageHelper.selectSubCategoryByIndex(Constants.number.two);
        StepLogger.verification('It should be selected.');
        await AccountsPageHelper.verifySelectedCategory(category);
        await AccountsPageHelper.verifySelectedSubCategory(subCategory);

        StepLogger.stepId(5);
        StepLogger.step('Select "Emergency" in priority field.');
        await AccountsPageHelper.selectPriority(AccountConstants.priorityValues.emergency);
        StepLogger.verification('It should be selected.');
        await AccountsPageHelper.verifySelectedPriority(AccountConstants.priorityValues.emergency);

        StepLogger.stepId(6);
        StepLogger.step('Enter "Resolved" in status field.');
        await AccountsPageHelper.selectStatus(AccountConstants.status.resolved);
        StepLogger.verification('It should be selected.');
        await AccountsPageHelper.verifySelectedStatus(AccountConstants.status.resolved);

        StepLogger.stepId(7);
        StepLogger.step('Click "save".');
        await AccountsPageHelper.clickOnSaveButton();
        StepLogger.verification('Case should be saved.');
        await AccountsPageHelper.verifyNoValidationRequiredFieldMessageDisplayed();

        StepLogger.stepId(8);
        StepLogger.step('Verify that case is also displayed in case tab.');
        StepLogger.verification('It should be displayed.');
        await AccountsPageHelper.verifyCaseFromCasesPageDisplayed(subject);
    });

    // Jira References - COTRAC-3345
    it('To verify that user can save case with status "Complaint only - not actionable ". - [22946038]', async () => {
        // Auto generated by aurea-automation - util on Mon, 25 Mar 2019 09:28:04 GMT

        StepLogger.caseId = 22946038;
        StepLogger.preCondition('Sign in');
        await LoginPageHelper.loginAsAdmin();

        StepLogger.stepId(1);
        StepLogger.step('Go to Cases tab-> Add case.');
        await AccountsPageHelper.navigateToNewCasePage();
        StepLogger.verification('New case should be displayed.');
        await AccountsPageHelper.verifyNewCasePageTitle();

        StepLogger.stepId(2);
        StepLogger.step('Enter Subject.');
        const subject = RandomHelper.getRandomString();
        await AccountsPageHelper.typeCaseSubject(subject);
        StepLogger.verification('It should be entered.');
        await AccountsPageHelper.verifyCaseSubject(subject);

        StepLogger.stepId(3);
        StepLogger.step('Enter description.');
        const description = RandomHelper.getRandomString();
        await AccountsPageHelper.typeDescription(description);
        StepLogger.verification('It should be entered.');
        await AccountsPageHelper.verifyDescription(description);

        StepLogger.stepId(4);
        StepLogger.step('Select a category and a sub category.');
        const category = await AccountsPageHelper.selectCategoryByIndex(Constants.number.two);
        const subCategory = await AccountsPageHelper.selectSubCategoryByIndex(Constants.number.two);
        StepLogger.verification('It should be selected.');
        await AccountsPageHelper.verifySelectedCategory(category);
        await AccountsPageHelper.verifySelectedSubCategory(subCategory);

        StepLogger.stepId(5);
        StepLogger.step('Enter "Complaint only - not actionable" in status field.');
        await AccountsPageHelper.selectStatus(AccountConstants.status.complaintOnlyNotActionable);
        StepLogger.verification('It should be selected.');
        await AccountsPageHelper.verifySelectedStatus(AccountConstants.status.complaintOnlyNotActionable);

        StepLogger.stepId(6);
        StepLogger.step('Click "save".');
        await AccountsPageHelper.clickOnSaveButton();
        StepLogger.verification('Case should be saved.');
        await AccountsPageHelper.verifyNoValidationRequiredFieldMessageDisplayed();

        StepLogger.stepId(7);
        StepLogger.step('Verify that case is also displayed in case tab.');
        StepLogger.verification('It should be displayed.');
        await AccountsPageHelper.verifyCaseFromCasesPageDisplayed(subject);
    });

    // Jira References - COTRAC-3346
    it('To verify that user is able to save a new case by entering data in all the fields - [22946043]', async () => {
        // Auto generated by aurea-automation - util on Mon, 25 Mar 2019 09:28:04 GMT

        StepLogger.caseId = 22946043;
        StepLogger.preCondition('Sign in');
        await LoginPageHelper.loginAsAdmin();

        StepLogger.stepId(1);
        StepLogger.step('Go to Cases tab-> Add case.');
        await AccountsPageHelper.navigateToNewCasePage();
        StepLogger.verification('New case should be displayed.');
        await AccountsPageHelper.verifyNewCasePageTitle();

        StepLogger.stepId(2);
        StepLogger.step('Enter Subject.');
        const subject = RandomHelper.getRandomString();
        StepLogger.verification('It should be entered.');
        await AccountsPageHelper.typeCaseSubject(subject);

        StepLogger.stepId(3);
        StepLogger.step('Enter description.');
        const description = RandomHelper.getRandomString();
        await AccountsPageHelper.typeDescription(description);
        StepLogger.verification('It should be entered.');
        await AccountsPageHelper.verifyDescription(description);

        StepLogger.stepId(4);
        StepLogger.step('Select a category and a sub category.');
        const category = await AccountsPageHelper.selectCategoryByIndex(Constants.number.two);
        const subCategory = await AccountsPageHelper.selectSubCategoryByIndex(Constants.number.two);
        StepLogger.verification('It should be selected.');
        await AccountsPageHelper.verifySelectedCategory(category);
        await AccountsPageHelper.verifySelectedSubCategory(subCategory);

        StepLogger.stepId(5);
        StepLogger.step('Select value in "contact by " field.');
        await AccountsPageHelper.selectContactBy(AccountConstants.contactBy.fax);
        StepLogger.verification('It should be selected.');
        await AccountsPageHelper.verifySelectedContactByValue(AccountConstants.contactBy.fax);

        StepLogger.stepId(6);
        StepLogger.step('Select a value in priority field.');
        await AccountsPageHelper.selectPriority(AccountConstants.priorityValues.normal);
        StepLogger.verification('It should be selected.');
        await AccountsPageHelper.verifySelectedPriority(AccountConstants.priorityValues.normal);

        StepLogger.stepId(7);
        StepLogger.step('Select a value in status field.');
        await AccountsPageHelper.selectStatus(AccountConstants.status.resolved);
        StepLogger.verification('Status should be selected.');
        await AccountsPageHelper.verifySelectedStatus(AccountConstants.status.resolved);

        StepLogger.stepId(8);
        StepLogger.step('Click "save"');
        await AccountsPageHelper.clickOnSaveButton();
        StepLogger.verification('Case should be saved.');
        await AccountsPageHelper.verifyNoValidationRequiredFieldMessageDisplayed();

        StepLogger.stepId(9);
        StepLogger.step('Verify that case is also displayed in case tab.');
        StepLogger.verification('It should be displayed.');
        await AccountsPageHelper.verifyCaseFromCasesPageDisplayed(subject);
    });

    // Jira References - COTRAC-3470
    it('To verify user is able to edit the case. - [22946045]', async () => {
        // Auto generated by aurea-automation - util on Tue, 26 Mar 2019 22:45:37 GMT

        StepLogger.caseId = 22946045;
        StepLogger.preCondition('Sign in and create a case');
        await LoginPageHelper.loginAsAdmin();
        await AccountsPageHelper.createCaseAndSwithToFirstBab();

        StepLogger.stepId(1);
        StepLogger.step('Go to Cases tab-> Add case.');
        await AccountsPageHelper.navigateToCasesPage();
        StepLogger.verification('New case should be displayed.');
        await AccountsPageHelper.verifyCasesListDisplayed();

        StepLogger.stepId(2);
        StepLogger.step('Double click a case.');
        await AccountsPageHelper.OpenCase();
        StepLogger.verification('Case should be displayed in Editable format.');
        await AccountsPageHelper.verifyCasesDisplayedInEditableMode();

        StepLogger.stepId(3);
        StepLogger.step('Edit the subject of the case.');
        const subject = RandomHelper.getRandomString();
        await AccountsPageHelper.typeCaseSubject(subject);
        StepLogger.verification('Subject should be edited.');
        await AccountsPageHelper.verifyCaseSubject(subject);

        StepLogger.stepId(4);
        StepLogger.step('Click "save".');
        await AccountsPageHelper.clickOnSaveButton();
        StepLogger.verification('Edited case should be saved.');
        await AccountsPageHelper.verifyCaseFromCasesPageDisplayed(subject);
    });
});
