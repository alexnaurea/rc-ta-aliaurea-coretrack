import { StepLogger } from '../../../../../../core/logger/step-logger';
import { PageHelper } from '../../../../../components/html/page-helper';
import { DashboardPageConstant } from '../../../../../page-objects/pages/home-page/dashboard/dashboard.constants';
import { DashboardPageHelper } from '../../../../../page-objects/pages/home-page/dashboard/dashboard.helper';
import { DashboardPage } from '../../../../../page-objects/pages/home-page/dashboard/dashboard.po';
import { HomePageHelper } from '../../../../../page-objects/pages/home-page/home-page.helper';
import { HomePage } from '../../../../../page-objects/pages/home-page/home-page.po';
import { HomePage1Helper } from '../../../../../page-objects/pages/home-page/home-page1.helper';
import { LoginPageHelper } from '../../../../../page-objects/pages/login-page/login-page.helper';
import { MyProfilePageHelper } from '../../../../../page-objects/pages/my-profile/my-profile.helper';
import { SuiteNames } from '../../../../helpers/suite-names';

describe(SuiteNames.regressionSuite, () => {
    const id = PageHelper.getUniqueId();
    const dashboard = `${DashboardPageConstant.elementNames.newDashboard}${id}`;
    let loginPageHelper: LoginPageHelper;

    beforeAll(async () => {
        loginPageHelper = LoginPageHelper.getInstance();
        await PageHelper.maximiseBrowser();
    });

    beforeEach(async () => {
        await PageHelper.restartBrowser();
        await loginPageHelper.goTo();
        await LoginPageHelper.loginAsAdmin();
    });

    // Jira References - COTRAC-152
    it('Verify that the user can access My Profile page Permissions - [22979012]', async () => {
        // Auto generated by aurea-automation - util on Sat, 06 Apr 2019 19:32:50 GMT

        StepLogger.preCondition('Create Dashboard and Add Pipeline Widget.');
        await DashboardPageHelper.createDashboard(id);
        await DashboardPageHelper.addPipelineWidget();

        StepLogger.caseId = 22979012;
        StepLogger.stepId(1);
        StepLogger.step('Navigate to Home My Profile module from the left menu panel');
        StepLogger.verification('My Profile module should be displayed in left menu panel of Home page');
        await HomePageHelper.verifyMyProfileLinkDisplayed();

        StepLogger.stepId(2);
        StepLogger.step('Click My Profile');
        await HomePageHelper.clickMyProfileLink();
        StepLogger.verification('Logged in users profile should get opened in a new page');
        await MyProfilePageHelper.verifyNewCasePageDisplayed(false);

        StepLogger.stepId(3);
        StepLogger.step('Click on the Permissions tab');
        await MyProfilePageHelper.clickPermissionsTab();
        StepLogger.verification('Permissions page should get opened for the logged in user');
        await MyProfilePageHelper.verifyPermissionTab();
    });

    // Jira References - COTRAC-152
    it('Verify that user can change Branch settings for Pipeline widget in existing Dashboard - [22980241]', async () => {
        // Auto generated by aurea-automation - util on Wed, 10 Apr 2019 14:55:26 GMT
        const branchOptionOne = DashboardPageConstant.elementNames.branchOptionOne;

        StepLogger.preCondition('Open dashboard');
        await DashboardPageHelper.openDashboard(dashboard, true);

        StepLogger.caseId = 22980241;
        StepLogger.stepId(1);
        StepLogger.step('Click on the Settings icon within the top side of the pipeline widget');
        await HomePage1Helper.clickOnSettingIcon();
        StepLogger.verification('Settings window should be displayed for the pipeline widget');
        await HomePage1Helper.verifySettingPopup();

        StepLogger.stepId(2);
        StepLogger.step('Click on the Branch drop down');
        await HomePage1Helper.clickBranchDdlArrow();
        StepLogger.verification('Branch drop down list should contain all the Branch names displayed');
        await HomePage1Helper.verifyBranchElementsDisplayed();

        StepLogger.stepId(3);
        StepLogger.step('Select Branch name as desired');
        await HomePage1Helper.hoverAndClickOnElement(branchOptionOne);
        StepLogger.verification('Selected Branch should be displayed');
        await DashboardPage.dashboard.branchInput.verifyTextBoxContains(branchOptionOne);

        StepLogger.stepId(4);
        StepLogger.step('Click OK icon on bottom right');
        await DashboardPageHelper.clickOkButton();
        StepLogger.verification('Pipeline widget should display values according to the selected Branch (if there are pipeline data available)');
        await DashboardPageHelper.verifyPipelineWidget();
    });

    // Jira References - COTRAC-152
    it('Verify that user can change Date Range settings for Pipeline widget in existing Dashboard - [22980230]', async () => {
        // Auto generated by aurea-automation - util on Wed, 10 Apr 2019 14:55:27 GMT
        const dateRangeOptionOne = DashboardPageConstant.elementNames.dateRangeOptionOne;

        StepLogger.preCondition('Open dashboard');
        await DashboardPageHelper.openDashboard(dashboard, true);

        StepLogger.caseId = 22980230;
        StepLogger.stepId(1);
        StepLogger.step('Click on the Settings icon within the top side of the pipeline widget');
        await HomePage1Helper.clickOnSettingIcon();
        StepLogger.verification('Settings window should be displayed for the pipeline widget');
        await HomePage1Helper.verifySettingPopup();

        StepLogger.stepId(2);
        StepLogger.step('Click on the Date Range drop down');
        await HomePage1Helper.clickDateRangeDdlArrow();
        StepLogger.verification(`Date Range drop down list should contain,
            -30 Days, -60 Days, -90 Days and -180 Days`);
        await HomePage1Helper.verifyDateRangeElementsDisplayed();

        StepLogger.stepId(3);
        StepLogger.step('Select Date Range settings value as desired');
        await HomePage1Helper.hoverAndClickOnElement(dateRangeOptionOne);
        StepLogger.verification('Selected value should be displayed');
        await DashboardPage.dashboard.dateRangeInput.verifyTextBoxContains(dateRangeOptionOne);

        StepLogger.stepId(4);
        StepLogger.step('Click OK icon on bottom right');
        await DashboardPageHelper.clickOkButton();
        StepLogger.verification('Pipeline widget should display values according to the selected Date range');
        await DashboardPageHelper.verifyPipelineWidget();
    });

    // Jira References - COTRAC-152
    it('Verify that user can navigate through data with arrow icons inside the Pipeline widget in existing Dashboard - [22980357]', async () => {
        // Auto generated by aurea-automation - util on Wed, 10 Apr 2019 14:55:27 GMT

        StepLogger.preCondition('Open dashboard');
        await DashboardPageHelper.openDashboard(dashboard, true);

        StepLogger.caseId = 22980357;
        StepLogger.stepId(1);
        StepLogger.step('Verify the Pipeline widget is displayed with pipeline data');
        StepLogger.verification('Pipeline widget should be displayed with data and Total data value should be displayed in the bottom of the pipeline widget');
        await DashboardPageHelper.verifyPipelineWidget();

        StepLogger.stepId(2);
        StepLogger.step('Click right arrow displayed in the bottom right of the pipeline widget');
        const selectedText = await DashboardPageHelper.clickIconNavigateRightAndGetText();
        StepLogger.verification('Pipeline widget data rows should get highlighted, input type and ' +
            'data value should be displayed accordingly when navigating through the rows in downward direction');
        await DashboardPageHelper.verifyTextNotEqualToSelectedText(selectedText);

        StepLogger.stepId(3);
        StepLogger.step('Click left arrow displayed in the bottom left of the pipeline widget');
        await DashboardPageHelper.clickIconNavigateLeft();
        StepLogger.verification('Pipeline data input type and data value should be displayed accordingly when navigating through the rows in upward direction');
        await DashboardPageHelper.verifyTextEqualToSelectedText(selectedText);
    });

    // Jira References - COTRAC-152
    it('Verify that user can expand the added Pipeline widget - [22980153]', async () => {
        // Auto generated by aurea-automation - util on Wed, 10 Apr 2019 14:55:27 GMT

        StepLogger.preCondition('Open dashboard');
        await DashboardPageHelper.openDashboard(dashboard, true);

        StepLogger.caseId = 22980153;
        StepLogger.stepId(1);
        StepLogger.step('Verify Pipeline widget is displayed in the New Dashboard with data');
        StepLogger.verification('Pipeline widget should be displayed in the newly created Dashboard');
        await DashboardPageHelper.verifyPipelineWidget();

        StepLogger.stepId(2);
        StepLogger.step('Click on the Expand icon within the top right side of the widget menu');
        await HomePage1Helper.clickOnExpandIcon();
        StepLogger.verification('Pipeline widget should get expanded with charts in a new window');
        await DashboardPageHelper.verifyPipelineWidget();

        StepLogger.stepId(3);
        StepLogger.step('Review and select data inputs within the expanded widget');
        StepLogger.verification('Pipeline data chart grid should get highlighted when hover over the sections ' +
            'on the chart and data should be displayed in a grid view with details -Name -Count -Value -Percentage');
        await HomePage1Helper.verifyDataGridColumnsDisplayed();
    });

    // Jira References - COTRAC-152
    it('Verify that user can navigate through data inside the Pipeline widget - [22980108]', async () => {
        // Auto generated by aurea-automation - util on Wed, 10 Apr 2019 14:55:27 GMT

        StepLogger.preCondition('Open dashboard');
        await DashboardPageHelper.openDashboard(dashboard, true);

        StepLogger.caseId = 22980108;
        StepLogger.stepId(1);
        StepLogger.step('Verify the Pipeline widget is displayed with pipeline data');
        StepLogger.verification('Pipeline widget should be displayed with pipeline data');
        await DashboardPageHelper.verifyPipelineWidget();

        StepLogger.stepId(2);
        StepLogger.step('Click inside pipeline widget data rows');
        let selectedText = await DashboardPageHelper.getAndDeselectDataRow();
        StepLogger.verification('Pipeline widget data row should get highlighted dark when click on the data row');
        await DashboardPageHelper.verifyTextEqualToSelectedText(selectedText);

        StepLogger.stepId(3);
        StepLogger.step('Verify pipeline widget data row values displayed by selecting different data rows');
        selectedText = await DashboardPageHelper.clickIconNavigateRightAndGetText();
        await HomePage.getWidgetDataRow(selectedText).clickLink();
        StepLogger.verification('Pipeline input type and value should be displayed in the bottom of the pipeline widget according to the selected data row');
        await DashboardPageHelper.verifyTextEqualToSelectedText(selectedText);
    });

    // Jira References - COTRAC-152
    it('Verify that user can navigate through data inside the Pipeline widget in existing Dashboard - [22980328]', async () => {
        // Auto generated by aurea-automation - util on Wed, 10 Apr 2019 14:55:27 GMT

        StepLogger.preCondition('Open dashboard');
        await DashboardPageHelper.openDashboard(dashboard, true);

        StepLogger.caseId = 22980328;
        StepLogger.stepId(1);
        StepLogger.step('Verify the Pipeline widget is displayed with pipeline data');
        StepLogger.verification('Pipeline widget should be displayed with pipeline data');
        await DashboardPageHelper.verifyPipelineWidget();

        StepLogger.stepId(2);
        StepLogger.step('Click inside pipeline widget data rows');
        let selectedText = await DashboardPageHelper.getAndDeselectDataRow();
        StepLogger.verification('Pipeline widget data row should get highlighted dark when click on the data row');
        await DashboardPageHelper.verifyTextEqualToSelectedText(selectedText);

        StepLogger.stepId(3);
        StepLogger.step('Verify pipeline widget data row values displayed by selecting different data rows');
        selectedText = await DashboardPageHelper.clickIconNavigateRightAndGetText();
        await HomePage.getWidgetDataRow(selectedText).clickLink();
        StepLogger.verification('Pipeline input type and value should be displayed in the bottom of the pipeline widget according to the selected data row');
        await DashboardPageHelper.verifyTextEqualToSelectedText(selectedText);
    });

    // Jira References - COTRAC-152
    it('Verify that user can access settings of added Pipeline widget in existing Dashboard - [22980228]', async () => {
        // Auto generated by aurea-automation - util on Wed, 10 Apr 2019 14:55:28 GMT

        StepLogger.preCondition('Open dashboard');
        await DashboardPageHelper.openDashboard(dashboard, true);

        StepLogger.caseId = 22980228;
        StepLogger.stepId(1);
        StepLogger.step('Verify Pipeline widget is displayed in the existing Dashboard with data');
        StepLogger.verification('Pipeline widget should be displayed in the existing Dashboard with other existing widgets');
        await DashboardPageHelper.verifyPipelineWidget();

        StepLogger.stepId(2);
        StepLogger.step('Click on the Settings icon within the top side of the pipeline widget');
        await HomePage1Helper.clickOnSettingIcon();
        StepLogger.verification('Settings window should be displayed for the pipeline widget');
        await HomePage1Helper.verifySettingPopup();

        StepLogger.stepId(3);
        StepLogger.step('Verify the Settings window attributes');
        StepLogger.verification(`Following drop down lists should be displayed,
            Date Range,
            Branch,
            Scope`);
        await DashboardPageHelper.verifySettingsParams();

        StepLogger.stepId(4);
        StepLogger.step('Verify the Settings window buttons');
        StepLogger.verification(`Following buttons should be displayed at the bottom right of the window
            -Delete -Save`);
        await DashboardPageHelper.verifySettingsDialogButtons();
    });

    // Jira References - COTRAC-152
    it('Verify that user can change Scope settings for Pipeline widget in existing Dashboard - [22980253]', async () => {
        // Auto generated by aurea-automation - util on Wed, 10 Apr 2019 14:55:28 GMT
        const scopeOptionOne = DashboardPageConstant.elementNames.scopeOptionOne;

        StepLogger.preCondition('Open dashboard');
        await DashboardPageHelper.openDashboard(dashboard, true);

        StepLogger.caseId = 22980253;
        StepLogger.stepId(1);
        StepLogger.step('Click on the Settings icon within the top side of the pipeline widget');
        await HomePage1Helper.clickOnSettingIcon();
        StepLogger.verification('Settings window should be displayed for the pipeline widget');
        await HomePage1Helper.verifySettingPopup();

        StepLogger.stepId(2);
        StepLogger.step('Click on the Scope drop down');
        await HomePage1Helper.clickScopeDdlArrow();
        StepLogger.verification('Scope drop down list should display all the Scope details accordingly');
        await HomePage1Helper.verifyScopeElementsDisplayed();

        StepLogger.stepId(3);
        StepLogger.step('Select Scope value as desired');
        await HomePage1Helper.hoverAndClickOnElement(scopeOptionOne);
        StepLogger.verification('Selected Scope should be displayed');
        await DashboardPage.dashboard.scopeInput.verifyTextBoxContains(scopeOptionOne);

        StepLogger.stepId(4);
        StepLogger.step('Click OK icon on bottom right');
        await DashboardPageHelper.clickOkButton();
        StepLogger.verification('Pipeline widget should display values according to the selected Scope (if there are pipeline data available)');
        await DashboardPageHelper.verifyPipelineWidget();
    });

    // Jira References - COTRAC-152
    it('Verify the close button functionality in expanded Pipeline widget of existing Dashboard - [22980359]', async () => {
        // Auto generated by aurea-automation - util on Wed, 10 Apr 2019 14:55:28 GMT

        StepLogger.preCondition('Open dashboard');
        await DashboardPageHelper.openDashboard(dashboard, true);

        StepLogger.caseId = 22980359;
        StepLogger.stepId(1);
        StepLogger.step('Verify Pipeline widget is displayed in the Dashboard with data');
        StepLogger.verification('Pipeline widget should be displayed in the existing Dashboard');
        await DashboardPageHelper.verifyPipelineWidget();

        StepLogger.stepId(2);
        StepLogger.step('Click on the Expand icon within the top right side of the widget menu');
        await HomePage1Helper.clickOnExpandIcon();
        StepLogger.verification('Pipeline widget should get expanded with charts in a new window');
        await DashboardPageHelper.verifyPipelineWidget();

        StepLogger.stepId(3);
        StepLogger.step('Click the "x" on the top right side of the screen');
        await DashboardPageHelper.clickCloseButton();
        StepLogger.verification('Expanded pipeline widget should get closed and Home page should be displayed with the Dashboard');
        await DashboardPageHelper.verifyPipelineWidget();
    });

    // Jira References - COTRAC-152
    it('Verify that user can expand the added Pipeline widget in existing Dashboard - [22980358]', async () => {
        // Auto generated by aurea-automation - util on Wed, 10 Apr 2019 14:55:28 GMT

        StepLogger.preCondition('Open dashboard');
        await DashboardPageHelper.openDashboard(dashboard, true);

        StepLogger.caseId = 22980358;
        StepLogger.stepId(1);
        StepLogger.step('Verify Pipeline widget is displayed in the Dashboard with data');
        StepLogger.verification('Pipeline widget should be displayed in the existing Dashboard');
        await DashboardPageHelper.verifyPipelineWidget();

        StepLogger.stepId(2);
        StepLogger.step('Click on the Expand icon within the top right side of the widget menu');
        await HomePage1Helper.clickOnExpandIcon();
        StepLogger.verification('Pipeline widget should get expanded with charts in a new window');
        await DashboardPageHelper.verifyPipelineWidget();

        StepLogger.stepId(3);
        StepLogger.step('Review and select data inputs within the expanded widget');
        StepLogger.verification('Pipeline data chart grid should get highlighted when hover over the sections ' +
            'on the chart and data should be displayed in a grid view with details -Name -Count -Value -Percentage');
        await HomePage1Helper.verifyDataGridColumnsDisplayed();
    });

    // Jira References - COTRAC-152
    it('Verify that user can Delete Pipeline widget in existing Dashboard - [22980412]', async () => {
        // Auto generated by aurea-automation - util on Wed, 10 Apr 2019 14:55:28 GMT

        StepLogger.preCondition('Open dashboard');
        await DashboardPageHelper.openDashboard(dashboard, true);

        StepLogger.caseId = 22980412;
        StepLogger.stepId(1);
        StepLogger.step('Verify Pipeline widget is displayed in the existing Dashboard with data');
        StepLogger.verification('Pipeline widget should be displayed in the existing Dashboard with other existing widgets');

        StepLogger.stepId(2);
        StepLogger.step('Click on the Settings icon within the top side of the pipeline widget');
        await HomePage1Helper.clickOnSettingIcon();
        StepLogger.verification('Settings window should be displayed for the pipeline widget');
        await HomePage1Helper.verifySettingPopup();

        StepLogger.stepId(3);
        StepLogger.step('Verify the Settings window buttons');
        StepLogger.verification(`Following buttons should be displayed at the bottom right of the window
            -Delete -Save`);
        await DashboardPageHelper.verifySettingsDialogButtons();

        StepLogger.stepId(4);
        StepLogger.step('Click Delete');
        await DashboardPageHelper.clickDeleteButton();
        StepLogger.verification('Delete icon should be displayed as "Delete This widget"');
        await DashboardPageHelper.verifyDeleteThisWidget();

        StepLogger.stepId(5);
        StepLogger.step('Click on Delete this widget button');
        await DashboardPageHelper.clickDeleteThisWidget();
        StepLogger.verification('Pipeline widget should get deleted successfully and Action Center page should be displayed with other existing widgets');
        await DashboardPageHelper.verifyDashboardCreatedAndAddWidget(dashboard);
    });
});
