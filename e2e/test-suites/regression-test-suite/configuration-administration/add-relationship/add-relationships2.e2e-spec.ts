import { StepLogger } from '../../../../../core/logger/step-logger';
import { PageHelper } from '../../../../components/html/page-helper';
import { RelationshipsConstants } from '../../../../page-objects/pages/administration/configuration/relationships/relationships.constants';
import { RelationshipsHelper } from '../../../../page-objects/pages/administration/configuration/relationships/relationships.helper';
import { HomePageHelper } from '../../../../page-objects/pages/home-page/home-page.helper';
import { HomePage1Helper } from '../../../../page-objects/pages/home-page/home-page1.helper';
import { LoginPageHelper } from '../../../../page-objects/pages/login-page/login-page.helper';
import { SuiteNames } from '../../../helpers/suite-names';

describe(SuiteNames.regressionSuite, () => {
    let loginPageHelper: LoginPageHelper;

    beforeAll(async () => {
        loginPageHelper = LoginPageHelper.getInstance();
        await PageHelper.maximiseBrowser();
    });

    beforeEach(async () => {
        await loginPageHelper.goTo();
        await LoginPageHelper.loginAsAdmin();
    });

    it('To verify that the validation error message is displayed when relationship code is left blank - [22777263]', async () => {
        // Auto generated by aurea-automation - util on Mon, 08 Apr 2019 10:47:54 GMT

        StepLogger.caseId = 22777263;
        const value = await PageHelper.getUniqueId();
        const error = RelationshipsConstants.errorMessages.code;

        StepLogger.stepId(1);
        StepLogger.step('Go to "Administration - > Configuration " displayed under administration.');
        await HomePageHelper.clickAdministrationLink();
        await HomePageHelper.clickConfigurationUnderAdministration();
        StepLogger.verification('Items available under Configuration should be displayed');
        await HomePageHelper.verifyOptionsUnderAdministration();

        StepLogger.stepId(2);
        StepLogger.step('Click Relationships');
        await HomePage1Helper.clickRelationshipsUnderConfiguration();
        StepLogger.verification('Manage Relationships page is displayed in right pane');
        await RelationshipsHelper.verifyRelationshipsManagePageDisplayed();

        StepLogger.stepId(3);
        StepLogger.step('Click Add Relationship button');
        await RelationshipsHelper.clickOnAddRelationshipButton();
        StepLogger.verification('New Relationship window is displayed');
        await RelationshipsHelper.verifyNewRelationshipScreen();

        StepLogger.stepId(4);
        StepLogger.step('Fill in Description field, leave Code blank and Click "save"');
        await RelationshipsHelper.enterDescription(value);
        await RelationshipsHelper.clickOnSaveButton();
        StepLogger.verification('Validation Error message should be displayed');
        await RelationshipsHelper.verifyValidationErrorMessage(error);
    });

    it('To verify that the validation error message is displayed when relationship description is left blank - [22777264]', async () => {
        // Auto generated by aurea-automation - util on Mon, 08 Apr 2019 11:27:01 GMT

        StepLogger.caseId = 22777264;
        const value = await PageHelper.getUniqueId();
        const error = await RelationshipsConstants.errorMessages.description;
        StepLogger.stepId(1);
        StepLogger.step('Go to "Administration - > Configuration " displayed under administration.');
        await HomePageHelper.clickAdministrationLink();
        await HomePageHelper.clickConfigurationUnderAdministration();
        StepLogger.verification('Items available under Configuration should be displayed');
        await HomePageHelper.verifyOptionsUnderConfiguration();

        StepLogger.stepId(2);
        StepLogger.step('Click Relationships');
        await HomePage1Helper.clickRelationshipsUnderConfiguration();
        StepLogger.verification('Manage Relationships page is displayed in right pane');
        await RelationshipsHelper.verifyRelationshipsManagePageDisplayed();

        StepLogger.stepId(3);
        StepLogger.step('Click Add Relationship button');
        await RelationshipsHelper.clickOnAddRelationshipButton();
        StepLogger.verification('New Relationship window is displayed');
        await RelationshipsHelper.verifyNewRelationshipScreen();

        StepLogger.stepId(4);
        StepLogger.step('Fill in Code field, leave Description blank and Click "save"');
        await RelationshipsHelper.enterCode(value);
        await RelationshipsHelper.clickOnSaveButton();
        StepLogger.verification('Validation Error message should be displayed');
        await RelationshipsHelper.verifyValidationErrorMessage(error);
    });

    it('To verify user is able to save an active relationship - [22806680]', async () => {
        // Auto generated by aurea-automation - util on Mon, 08 Apr 2019 11:55:16 GMT

        StepLogger.caseId = 22806680;
        const value = await PageHelper.getUniqueId();
        const active = RelationshipsConstants.activeStatus;
        const inactive = RelationshipsConstants.inactiveStatus;

        StepLogger.preCondition('Navigate To Add Relationship Page');
        await RelationshipsHelper.navigateToAddRelationshipPage();

        StepLogger.step('Enter "code"');
        await RelationshipsHelper.enterCode(value);
        StepLogger.verification('Value should be entered in code field');
        await RelationshipsHelper.verifyEnteredCode(value);

        StepLogger.stepId(2);
        StepLogger.step('Enter "Description"');
        await RelationshipsHelper.enterDescription(value);
        StepLogger.verification('Value should be entered in description field.');
        await RelationshipsHelper.verifyEnteredDescription(value);

        StepLogger.stepId(3);
        StepLogger.step('Click on Status drop-down');
        await RelationshipsHelper.clickOnStatusDropDown();
        StepLogger.verification('Active and Inactive values are displayed in drop-down');
        await RelationshipsHelper.verifyStatusSelected(active);
        await RelationshipsHelper.verifyStatusSelected(inactive);

        StepLogger.stepId(4);
        StepLogger.step('Select Active from status drop-down and click Save');
        await RelationshipsHelper.selectAStatusFromDropDown(active);
        await RelationshipsHelper.clickOnSaveButton();
        StepLogger.verification('Window is closed and Relationship is saved successfully');
        await RelationshipsHelper.verifyNewRelationshipScreenclosed();
    });

    it('To verify user is able to save an inactive relationship - [22808322]', async () => {
        // Auto generated by aurea-automation - util on Tue, 09 Apr 2019 01:14:09 GMT

        StepLogger.caseId = 22808322;
        const value = await PageHelper.getUniqueId();
        const active = RelationshipsConstants.activeStatus;
        const inactive = RelationshipsConstants.inactiveStatus;

        StepLogger.preCondition('Navigate To Add Relationship Page');
        await RelationshipsHelper.navigateToAddRelationshipPage();

        StepLogger.stepId(1);
        StepLogger.step('Enter "code"');
        await RelationshipsHelper.enterCode(value);
        StepLogger.verification('Value should be entered in code field');
        await RelationshipsHelper.verifyEnteredCode(value);

        StepLogger.stepId(2);
        StepLogger.step('Enter "Description"');
        await RelationshipsHelper.enterDescription(value);
        StepLogger.verification('Value should be entered in description field.');
        await RelationshipsHelper.verifyEnteredDescription(value);

        StepLogger.stepId(3);
        StepLogger.step('Click on Status drop-down');
        await RelationshipsHelper.clickOnStatusDropDown();
        StepLogger.verification('Active and Inactive values are displayed in drop-down');
        await RelationshipsHelper.verifyStatusSelected(active);
        await RelationshipsHelper.verifyStatusSelected(inactive);

        StepLogger.stepId(4);
        StepLogger.step('Select Inactive from status drop-down and click Save');
        await RelationshipsHelper.selectAStatusFromDropDown(inactive);
        await RelationshipsHelper.clickOnSaveButton();
        StepLogger.verification('Window is closed and Relationship is saved successfully');
        await RelationshipsHelper.verifyNewRelationshipScreenclosed();
    });

    it('To verify user is able to save Active relationship with Primary Indicator value "Yes" - [22819810]', async () => {
        // Auto generated by aurea-automation - util on Tue, 09 Apr 2019 01:45:38 GMT

        StepLogger.caseId = 22819810;
        const value = await PageHelper.getUniqueId();
        const yes = RelationshipsConstants.piYes;
        const active = RelationshipsConstants.activeStatus;

        StepLogger.preCondition('Navigate To Add Relationship Page');
        await RelationshipsHelper.navigateToAddRelationshipPage();

        StepLogger.stepId(1);
        StepLogger.step('Enter "code"');
        await RelationshipsHelper.enterCode(value);
        StepLogger.verification('Value should be entered in code field');
        await RelationshipsHelper.verifyEnteredCode(value);

        StepLogger.stepId(2);
        StepLogger.step('Enter "Description"');
        await RelationshipsHelper.enterDescription(value);
        StepLogger.verification('Value should be entered in description field.');
        await RelationshipsHelper.verifyEnteredDescription(value);

        StepLogger.stepId(3);
        StepLogger.step('Select "Yes" from drop-down for Primary Indicator field');
        await RelationshipsHelper.selectPIFieldFromDropDown(yes);
        StepLogger.verification('User is able to select Yes for Primary indicator');
        await RelationshipsHelper.verifyPISelected(yes);

        StepLogger.stepId(4);
        StepLogger.step('Select Active from status drop-down,fill in Sort Order and Click Save button');
        await RelationshipsHelper.selectAStatusFromDropDown(active);
        await RelationshipsHelper.clickOnSaveButton();
        StepLogger.verification('Window is closed and Relationship is saved successfully');
        await RelationshipsHelper.verifyNewRelationshipScreenclosed();
    });
});
