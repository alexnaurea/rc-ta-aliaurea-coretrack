import { StepLogger } from '../../../../../core/logger/step-logger';
import { PageHelper } from '../../../../components/html/page-helper';
import { GoalsConstants } from '../../../../page-objects/pages/administration/goals/goals.constants';
import { GoalsHelper } from '../../../../page-objects/pages/administration/goals/goals.helper';
import { HomePageHelper } from '../../../../page-objects/pages/home-page/home-page.helper';
import { HomePage1Helper } from '../../../../page-objects/pages/home-page/home-page1.helper';
import { LoginPageHelper } from '../../../../page-objects/pages/login-page/login-page.helper';
import { SuiteNames } from '../../../helpers/suite-names';

describe(SuiteNames.regressionSuite, () => {
    let loginPageHelper: LoginPageHelper;

    beforeAll(async () => {
        loginPageHelper = LoginPageHelper.getInstance();
        await PageHelper.maximiseBrowser();
    });

    beforeEach(async () => {
        await loginPageHelper.goTo();
        await LoginPageHelper.loginAsAdmin();
    });

    it('To verify that user is able to access Manage Goals page. - [22932137]', async () => {
        // Auto generated by aurea-automation - util on Thu, 11 Apr 2019 11:43:36 GMT

        StepLogger.caseId = 22932137;
        StepLogger.stepId(1);
        StepLogger.step('Click "Administration" link displayed in the left panel.');
        await HomePageHelper.clickAdministrationLink();
        StepLogger.verification('Option available under administration section should be displayed.');
        await HomePageHelper.verifyOptionsUnderAdministration();

        StepLogger.stepId(2);
        StepLogger.step('Verify "Goals" option is displayed under "Administration"');
        StepLogger.verification('"Goals" option should be displayed');
        await HomePage1Helper.verifyGoalsOptionUnderAdministration();

        StepLogger.stepId(3);
        StepLogger.step('Click "Goals".');
        await HomePage1Helper.clickOnGoalsOptionUnderAdministration();
        StepLogger.verification('"Manage Goals" should be displayed.');
        await GoalsHelper.verifyManageGoalsPage();
    });

    it('To verify that user is able to access New Goal dialogue. - [22932138]', async () => {
        // Auto generated by aurea-automation - util on Mon, 15 Apr 2019 01:26:47 GMT

        StepLogger.caseId = 22932138;
        StepLogger.preCondition('Click Administraion');
        await HomePageHelper.clickAdministrationLink();

        StepLogger.stepId(1);
        StepLogger.step('Verify "Goals" option is displayed under "Administration"');
        StepLogger.verification('"Goals" option should be displayed');
        await HomePage1Helper.verifyGoalsOptionUnderAdministration();

        StepLogger.stepId(2);
        StepLogger.step('Click "Goals".');
        await HomePage1Helper.clickOnGoalsOptionUnderAdministration();
        StepLogger.verification('"Manage Goals" should be displayed.');
        await GoalsHelper.verifyManageGoalsPage();

        StepLogger.stepId(3);
        StepLogger.step('Click "Add Goal".');
        await GoalsHelper.clickOnAddGoal();
        StepLogger.verification('"New Goal" page should be displayed.');
        await GoalsHelper.verifyNewGoalsScreen();
    });

    it('To verify the functionality of cancel button on new goal page. - [22932140]', async () => {
        // Auto generated by aurea-automation - util on Mon, 15 Apr 2019 05:47:19 GMT

        StepLogger.caseId = 22932140;
        StepLogger.preCondition('Click Administraion');
        await HomePageHelper.clickAdministrationLink();

        StepLogger.stepId(1);
        StepLogger.step('Verify "Goals" option is displayed under "Administration"');
        StepLogger.verification('"Goals" option should be displayed');
        await HomePage1Helper.verifyGoalsOptionUnderAdministration();

        StepLogger.stepId(2);
        StepLogger.step('Click "Goals".');
        await HomePage1Helper.clickOnGoalsOptionUnderAdministration();
        StepLogger.verification('"Manage Goals" should be displayed.');
        await GoalsHelper.verifyManageGoalsPage();

        StepLogger.stepId(3);
        StepLogger.step('Click "Add Goal".');
        await GoalsHelper.clickOnAddGoal();
        StepLogger.verification('"New Goal" page should be displayed.');
        await GoalsHelper.verifyNewGoalsScreen();

        StepLogger.stepId(4);
        StepLogger.step('Click "Cancel" button.');
        await GoalsHelper.clickOnCancel();
        StepLogger.verification('The New goal dialog should be closed and Manage goals page should be displayed.');
        await GoalsHelper.verifyNewGoalsScreenClosed();
    });

    it('To verify that validation error message is displayed when goal type is left blank. - [22932145]', async () => {
        // Auto generated by aurea-automation - util on Mon, 15 Apr 2019 06:27:28 GMT

        StepLogger.caseId = 22932145;
        const goal = GoalsConstants.goal;
        const role = GoalsConstants.businessDevelopment;
        const value = await PageHelper.getUniqueId();
        const error = GoalsConstants.error.periodType;

        StepLogger.stepId(1);
        StepLogger.step('Click "Administration -> Goals".');
        await HomePageHelper.clickAdministrationLink();
        await HomePage1Helper.clickOnGoalsOptionUnderAdministration();
        StepLogger.verification('"Manage Goals" should be displayed.');
        await GoalsHelper.verifyManageGoalsPage();

        StepLogger.stepId(2);
        StepLogger.step('Click "Add Goal".');
        await GoalsHelper.clickOnAddGoal();
        StepLogger.verification('"New Goal" page should be displayed.');
        await GoalsHelper.verifyNewGoalsScreen();

        StepLogger.stepId(3);
        StepLogger.step('Select "Role" in "goal is for" field.');
        await GoalsHelper.selectAGoalFromDropDown(goal);
        StepLogger.verification('Role field should be displayed.');
        await GoalsHelper.verifyGoalSelected(goal);

        StepLogger.stepId(4);
        StepLogger.step('Select a role from the drop down.');
        await GoalsHelper.selectARoleFromDropDown(role);
        StepLogger.verification('User should be selected.');
        await GoalsHelper.verifyGoalSelected(role);

        StepLogger.stepId(5);
        StepLogger.step('Click "save".');
        await GoalsHelper.enterDescription(value);
        await GoalsHelper.clickOnSave();
        StepLogger.verification('Validation Error message should be displayed.');
        await GoalsHelper.verifyValidationErrorMessage(error);
    });

    it('To verify that Edit goal dialog is displayed when user double clicks a goal. - [22932153]', async () => {
        // Auto generated by aurea-automation - util on Mon, 15 Apr 2019 08:37:03 GMT

        StepLogger.caseId = 22932153;
        const roles = GoalsConstants.roles;
        const role = GoalsConstants.businessDevelopment;

        StepLogger.stepId(1);
        StepLogger.step('Click "Administration -> Goals".');
        await HomePageHelper.clickAdministrationLink();
        await HomePage1Helper.clickOnGoalsOptionUnderAdministration();
        StepLogger.verification('"Manage Goals" should be displayed.');
        await GoalsHelper.verifyManageGoalsPage();

        StepLogger.stepId(2);
        StepLogger.step('Select Roles is first search filter.');
        await GoalsHelper.selectAValueFromFirstFilter(roles);
        StepLogger.verification('It should be selected.');
        await GoalsHelper.verifyValueSelected(roles);

        StepLogger.stepId(3);
        StepLogger.step('Select the Role for which the goal is created in the pre condition test case in second filter.');
        await GoalsHelper.selectAValueFromSecondeFilter(role);
        StepLogger.verification('It should be selected.');
        await GoalsHelper.verifyValueSelected(role);

        StepLogger.stepId(4);
        StepLogger.step('Verify the goal created in pre condition is displayed.');
        StepLogger.verification('Goal should be displayed.');
        await GoalsHelper.verifyGoalEntryDisplayed();

        StepLogger.stepId(5);
        StepLogger.step('Double click the goal.');
        await GoalsHelper.doubleClickOnGoalsEntry();
        StepLogger.verification('"Edit goal" window should be displayed.');
        await GoalsHelper.verifyEditGoalsScreen();
    });
});
