import { StepLogger } from '../../../../../core/logger/step-logger';
import { PageHelper } from '../../../../components/html/page-helper';
import { GoalsConstants } from '../../../../page-objects/pages/administration/goals/goals.constants';
import { GoalsHelper } from '../../../../page-objects/pages/administration/goals/goals.helper';
import { LoginPageHelper } from '../../../../page-objects/pages/login-page/login-page.helper';
import { SuiteNames } from '../../../helpers/suite-names';

describe(SuiteNames.regressionSuite, () => {
    let loginPageHelper: LoginPageHelper;

    beforeAll(async () => {
        loginPageHelper = LoginPageHelper.getInstance();
        await PageHelper.maximiseBrowser();
    });

    beforeEach(async () => {
        await loginPageHelper.goTo();
        await LoginPageHelper.loginAsAdmin();
    });

    it('To verify that user can edit an active goal to inactive goal. - [22932155]', async () => {
        // Auto generated by aurea-automation - util on Wed, 17 Apr 2019 01:48:18 GMT

        StepLogger.caseId = 22932155;
        const inactive = GoalsConstants.inactive;
        StepLogger.preCondition('Navigate To Goal Page And Access Created Goal');
        await GoalsHelper.navigateAndAccessCreatedGoal();

        StepLogger.stepId(1);
        StepLogger.step('Double click an active goal.');
        await GoalsHelper.doubleClickOnGoalsEntry();
        StepLogger.verification('Edit goal dialog should be displayed.');
        await GoalsHelper.verifyEditGoalsScreen();

        StepLogger.stepId(2);
        StepLogger.step('Edit the status to in active.');
        await GoalsHelper.selectAStatusFromDropDown(inactive);
        StepLogger.verification('Status should be updated.');
        await GoalsHelper.verifyStatusSelected(inactive);

        StepLogger.stepId(3);
        StepLogger.step('Click "save and close".');
        await GoalsHelper.clickOnSaveAndClose();
        StepLogger.verification('Updated status should be saved.');
        await GoalsHelper.verifyNewGoalsScreenClosed();
    });

    it('To verify that user can edit an inactive goal to active goal. - [22932156]', async () => {
        // Auto generated by aurea-automation - util on Wed, 17 Apr 2019 01:48:18 GMT

        StepLogger.caseId = 22932156;
        const active = GoalsConstants.active;
        StepLogger.preCondition('Navigate To Goal Page And Access Created Goal');
        await GoalsHelper.navigateAndAccessCreatedGoal();

        StepLogger.stepId(1);
        StepLogger.step('Double click an active goal.');
        await GoalsHelper.doubleClickOnGoalsEntry();
        StepLogger.verification('Edit goal dialog should be displayed.');
        await GoalsHelper.verifyEditGoalsScreen();

        StepLogger.stepId(2);
        StepLogger.step('Edit the status to active');
        await GoalsHelper.selectAStatusFromDropDown(active);
        StepLogger.verification('Status should be updated.');
        await GoalsHelper.verifyStatusSelected(active);

        StepLogger.stepId(3);
        StepLogger.step('Click "save and close".');
        await GoalsHelper.clickOnSaveAndClose();
        StepLogger.verification('Updated status should be saved.');
        await GoalsHelper.verifyNewGoalsScreenClosed();
    });

    it('To verify the functionality of delete button. - [22932157]', async () => {
        // Auto generated by aurea-automation - util on Wed, 17 Apr 2019 01:48:18 GMT

        StepLogger.caseId = 22932157;
        StepLogger.preCondition('Navigate To Goal Page And Access Created Goal');
        await GoalsHelper.navigateAndAccessCreatedGoal();

        StepLogger.stepId(1);
        StepLogger.step('Double click an active goal.');
        await GoalsHelper.doubleClickOnGoalsEntry();
        StepLogger.verification('Edit goal dialog should be displayed.');
        await GoalsHelper.verifyEditGoalsScreen();

        StepLogger.stepId(2);
        StepLogger.step('Click delete button.');
        await GoalsHelper.clickOnDelete();
        StepLogger.verification('Delete Confirmation message should be displayed');
        await GoalsHelper.verifyDeleteConfirmationDialog();

        StepLogger.stepId(3);
        StepLogger.step('Click "Delete"');
        await GoalsHelper.clickDeleteOnConfirmation();
        StepLogger.verification('The goal should be deleted.');
        await GoalsHelper.verifyNewGoalsScreenClosed();
    });
});
