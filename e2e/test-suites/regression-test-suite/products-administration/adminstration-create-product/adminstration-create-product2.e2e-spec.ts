import { StepLogger } from '../../../../../core/logger/step-logger';
import { PageHelper } from '../../../../components/html/page-helper';
import { ProductsConstants } from '../../../../page-objects/pages/administration/configuration/products/products.constants';
import { ProductsHelper } from '../../../../page-objects/pages/administration/configuration/products/products.helper';
import { HomePageHelper } from '../../../../page-objects/pages/home-page/home-page.helper';
import { LoginPageHelper } from '../../../../page-objects/pages/login-page/login-page.helper';
import { SuiteNames } from '../../../helpers/suite-names';

describe(SuiteNames.regressionSuite, () => {
    let loginPageHelper: LoginPageHelper;

    beforeAll(async () => {
        loginPageHelper = LoginPageHelper.getInstance();
        await PageHelper.maximiseBrowser();
    });

    beforeEach(async () => {
        await loginPageHelper.goTo();
        await LoginPageHelper.loginAsAdmin();
    });

    it('To verify that user is able to save the product by entering data only in mandatory fields. - [22415492]', async () => {
        // Auto generated by aurea-automation - util on Thu, 21 Mar 2019 01:37:39 GMT

        StepLogger.caseId = 22415492;
        const value1 = await PageHelper.getUniqueId();
        const value2 = await PageHelper.getUniqueId();

        StepLogger.stepId(1);
        StepLogger.step('Click Administration -> Configuration displayed under administration.');
        await HomePageHelper.clickAdministrationLink();
        StepLogger.verification('Item available under configuration should be displayed.');
        await HomePageHelper.verifyOptionsUnderAdministration();

        StepLogger.stepId(2);
        StepLogger.step('Goto Configuration ->Products');
        await HomePageHelper.clickConfigurationUnderAdministration();
        await HomePageHelper.clickProductsUnderConfiguration();
        StepLogger.verification('Manage products page should be displayed.');
        await ProductsHelper.verifyProductsManagePageDisplayed();

        StepLogger.stepId(3);
        StepLogger.step('Click Add product button.');
        await ProductsHelper.clickOnAddProduct();
        StepLogger.verification('User should be navigated to new product screen.');
        await ProductsHelper.verifyNewProductScreen();

        StepLogger.stepId(4);
        StepLogger.step('Enter value in Code/id');
        await ProductsHelper.enterCodeIdOnProductScreen(value1);
        StepLogger.verification('Value should be entered.');
        await ProductsHelper.verifyEnteredCodeId(value1);

        StepLogger.stepId(5);
        StepLogger.step('Enter value in name field.');
        await ProductsHelper.enterNameOnProductScreen(value2);
        StepLogger.verification('Name should be entered.');
        await ProductsHelper.verifyEnteredName(value2);

        StepLogger.stepId(6);
        StepLogger.step('Enter data in description field.');
        await ProductsHelper.enterDescriptionOnProductScreen(value1);
        StepLogger.verification('Description should be entered.');
        await ProductsHelper.verifyEnteredDescription(value1);

        StepLogger.stepId(7);
        StepLogger.step('Click "save"');
        await ProductsHelper.clickOnSaveOnNewProductScreen();
        StepLogger.verification('Product should be saved and window is closed.');
        await ProductsHelper.verifyNewProductScreenClosed();

        StepLogger.stepId(8);
        StepLogger.step('Search for the product saved in step 8.');
        await ProductsHelper.enterValuesInSearchText(value2);
        await ProductsHelper.clickOnSearchIcon();
        StepLogger.verification('User should be able to search the created Product.');
        await ProductsHelper.verifySearchResults(value2);
    });

    it('To verify that user is able to edit Code/Id of a product. - [22415505]', async () => {
        // Auto generated by aurea-automation - util on Thu, 21 Mar 2019 07:34:53 GMT

        StepLogger.caseId = 22415505;
        const value1 = await PageHelper.getUniqueId();

        StepLogger.stepId(1);
        StepLogger.step('Click Administration -> Configuration displayed under administration.');
        await HomePageHelper.clickAdministrationLink();
        StepLogger.verification('Item available under configuration should be displayed.');
        await HomePageHelper.verifyOptionsUnderAdministration();

        StepLogger.stepId(2);
        StepLogger.step('Goto Configuration ->Products');
        await HomePageHelper.clickConfigurationUnderAdministration();
        await HomePageHelper.clickProductsUnderConfiguration();
        StepLogger.verification('Manage products page should be displayed.');
        await ProductsHelper.verifyProductsManagePageDisplayed();

        StepLogger.stepId(3);
        StepLogger.step('Click on the Edit button displayed besides the product in the list.');
        await ProductsHelper.clickOnEdit();
        StepLogger.verification('Edit product page is displayed.');
        await ProductsHelper.verifyEditProductScreen();

        StepLogger.stepId(4);
        StepLogger.step('Verify that user can edit the code/id field.');
        await ProductsHelper.enterCodeIdOnProductScreen(value1);
        StepLogger.verification('code/id should be edited.');
        await ProductsHelper.verifyEnteredCodeId(value1);

        StepLogger.stepId(5);
        StepLogger.step('Click "save"');
        await ProductsHelper.clickOnSaveOnNewProductScreen();
        StepLogger.verification('It should edited and saved.');
        await ProductsHelper.verifyNewProductScreenClosed();
        await ProductsHelper.verifySearchResults(value1);
    });

    it('To verify that user is able to edit Description of a product. - [22415504]', async () => {
        // Auto generated by aurea-automation - util on Thu, 21 Mar 2019 07:46:28 GMT

        StepLogger.caseId = 22415504;
        const value1 = await PageHelper.getUniqueId();

        StepLogger.stepId(1);
        StepLogger.step('Click Administration -> Configuration displayed under administration.');
        await HomePageHelper.clickAdministrationLink();
        StepLogger.verification('Item available under configuration should be displayed.');
        await HomePageHelper.verifyOptionsUnderAdministration();

        StepLogger.stepId(2);
        StepLogger.step('Goto Configuration ->Products');
        await HomePageHelper.clickConfigurationUnderAdministration();
        await HomePageHelper.clickProductsUnderConfiguration();
        StepLogger.verification('Manage products page should be displayed.');
        await ProductsHelper.verifyProductsManagePageDisplayed();

        StepLogger.stepId(3);
        StepLogger.step('Click on the Edit button displayed besides the product in the list.');
        await ProductsHelper.clickOnEdit();
        StepLogger.verification('Edit product page is displayed.');
        await ProductsHelper.verifyEditProductScreen();

        StepLogger.stepId(4);
        StepLogger.step('Verify that user can edit the description field.');
        await ProductsHelper.enterDescriptionOnProductScreen(value1);
        StepLogger.verification('Description should be edited.');
        await ProductsHelper.verifyEnteredDescription(value1);

        StepLogger.stepId(5);
        StepLogger.step('Click "save"');
        await ProductsHelper.clickOnSaveOnNewProductScreen();
        StepLogger.verification('It should edited and saved.');
        await ProductsHelper.verifyNewProductScreenClosed();
        await ProductsHelper.verifySearchResults(value1);
    });

    it('To verify that user is able to edit Name of a product. - [22415502]', async () => {
        // Auto generated by aurea-automation - util on Thu, 21 Mar 2019 08:06:18 GMT

        StepLogger.caseId = 22415502;
        const value1 = await PageHelper.getUniqueId();

        StepLogger.step('Click Administration -> Configuration displayed under administration.');
        await HomePageHelper.clickAdministrationLink();
        StepLogger.verification('Item available under configuration should be displayed.');
        await HomePageHelper.verifyOptionsUnderAdministration();

        StepLogger.stepId(2);
        StepLogger.step('Goto Configuration ->Products');
        await HomePageHelper.clickConfigurationUnderAdministration();
        await HomePageHelper.clickProductsUnderConfiguration();
        StepLogger.verification('Manage products page should be displayed.');
        await ProductsHelper.verifyProductsManagePageDisplayed();

        StepLogger.stepId(3);
        StepLogger.step('Click on the Edit button displayed besides the product in the list.');
        await ProductsHelper.clickOnEdit();
        StepLogger.verification('Edit product page is displayed.');
        await ProductsHelper.verifyEditProductScreen();

        StepLogger.stepId(4);
        StepLogger.step('Verify that user can edit the name field.');
        await ProductsHelper.enterNameOnProductScreen(value1);
        StepLogger.verification('Name should be edited.');
        await ProductsHelper.verifyEnteredName(value1);

        StepLogger.stepId(5);
        StepLogger.step('Click "save"');
        await ProductsHelper.clickOnSaveOnNewProductScreen();
        StepLogger.verification('It should edited and saved.');
        await ProductsHelper.verifyNewProductScreenClosed();
    });

    it('To verify that user is able to edit Type of a product. - [22415503]', async () => {
        // Auto generated by aurea-automation - util on Thu, 21 Mar 2019 08:16:56 GMT

        StepLogger.caseId = 22415503;
        StepLogger.stepId(1);
        const value1 = await ProductsConstants.typeDownValue;

        StepLogger.step('Click Administration -> Configuration displayed under administration.');
        await HomePageHelper.clickAdministrationLink();
        StepLogger.verification('Item available under configuration should be displayed.');
        await HomePageHelper.verifyOptionsUnderAdministration();

        StepLogger.stepId(2);
        StepLogger.step('Goto Configuration ->Products');
        await HomePageHelper.clickConfigurationUnderAdministration();
        await HomePageHelper.clickProductsUnderConfiguration();
        StepLogger.verification('Manage products page should be displayed.');
        await ProductsHelper.verifyProductsManagePageDisplayed();

        StepLogger.stepId(3);
        StepLogger.step('Click on the Edit button displayed besides the product in the list.');
        await ProductsHelper.clickOnEdit();
        StepLogger.verification('Edit product page is displayed.');
        await ProductsHelper.verifyEditProductScreen();

        StepLogger.stepId(4);
        StepLogger.step('Verify that user can edit the type field.');
        StepLogger.verification('Type field should be edited.');
        await ProductsHelper.selectATypeFromDropDown(value1);

        StepLogger.stepId(5);
        StepLogger.step('Click "save"');
        await ProductsHelper.clickOnSaveOnNewProductScreen();
        StepLogger.verification('It should edited and saved.');
        await ProductsHelper.verifyNewProductScreenClosed();
        await ProductsHelper.verifySearchResults(value1);
    });

    it('To verify the functionality of cancel button on "New product" page. - [22415500]', async () => {
        // Auto generated by aurea-automation - util on Thu, 21 Mar 2019 09:00:25 GMT

        StepLogger.caseId = 22415500;
        StepLogger.step('Click Administration -> Configuration displayed under administration.');
        await HomePageHelper.clickAdministrationLink();
        StepLogger.verification('Item available under configuration should be displayed.');
        await HomePageHelper.verifyOptionsUnderAdministration();

        StepLogger.stepId(2);
        StepLogger.step('Goto Configuration ->Products');
        await HomePageHelper.clickConfigurationUnderAdministration();
        await HomePageHelper.clickProductsUnderConfiguration();
        StepLogger.verification('Manage products page should be displayed.');
        await ProductsHelper.verifyProductsManagePageDisplayed();

        StepLogger.stepId(3);
        StepLogger.step('Click Add product button.');
        await ProductsHelper.clickOnAddProduct();
        StepLogger.verification('User should be navigated to new product screen.');
        await ProductsHelper.verifyNewProductScreen();

        StepLogger.stepId(4);
        StepLogger.step('Click the cancel button displayed on top Right corner.');
        await ProductsHelper.clickOnCancelOnProductScreen();
        StepLogger.verification('Warning message should be displayed.');
        await ProductsHelper.verifyWarningMessagePopup();

        StepLogger.stepId(5);
        StepLogger.step('Click "OK"');
        await ProductsHelper.clickOkOnWarningMessagePopup();
        StepLogger.verification('Add product dialog box should be closed.');
        await ProductsHelper.verifyNewProductScreenClosed();
    });
});
