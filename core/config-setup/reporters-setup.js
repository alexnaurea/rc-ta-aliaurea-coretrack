const SpecReporter = require('jasmine-spec-reporter').SpecReporter;
const AllureEnvPropsAdder = require('allure-env-properties-adder').AllureEnvPropsAdder;
const configSetup = require('./default-config-setup');
const autoGeneratedFolderName = 'auto-generated';
const TestRailReporter = require('@aurea/aurea-jasmine-testrail-reporter');
let platform = '';
let browserName = '';
const commonConfigSetup = {
    onPrepareSetup() {
        const log4js = require('log4js');
        const dateStamp = new Date().toUTCString().replace(/[^A-Z0-9]+/ig, '-').toLowerCase();
        log4js.configure({
            appenders: {
                multi: {
                    type: 'multiFile',
                    base: `${autoGeneratedFolderName}/logs/${(process.env.BUILD_NUMBER || dateStamp)}`,
                    property: 'categoryName',
                    extension: '.log',
                },
            },
            categories: {
                default: {appenders: ['multi'], level: 'all'},
            },
        });

        require('ts-node').register({
            project: 'e2e/tsconfig.e2e.json',
        });

        browser.waitForAngularEnabled(false).then(() => true);

        jasmine.getEnv().addReporter(new SpecReporter({
            spec: {
                displayStacktrace: 'all',
            },
        }));

        return browser.getCapabilities().then(function (cap) {
            platform = cap.get('platform');
            browserName = cap.get('browserName');
            browser.platform = platform;
            browser.browserName = browserName;
            commonConfigSetup.allureEnvPropsAdder();
            commonConfigSetup.testRailSetup();
        });
    },
    allureEnvPropsAdder() {
        jasmine.getEnv().addReporter(new AllureEnvPropsAdder({
            outputDir: 'auto-generated/allure-results',
            props: {
                BASE_URL: browser.baseUrl,
                PLATFORM: platform,
                BROWSER_NAME: browserName,
                GIT_BRANCH: process.env.TEST_GIT_BRANCH,
                GIT_COMMIT: process.env.GIT_COMMIT,
                JOB_NAME: process.env.JOB_NAME
            }
        }));
    },
    allureReporterSetup() {
        const AllureReporter = require('jasmine-allure-reporter');
        const reporter = new AllureReporter({
            resultsDir: autoGeneratedFolderName + '/allure-results',
        });
        jasmine.getEnv().addReporter(reporter);

        jasmine.getEnv().afterEach(function (done) {
            browser.takeScreenshot().then(function (png) {
                allure.createAttachment('Screenshot', function () {
                    return Buffer.from(png, 'base64');
                }, 'image/png')();
                done();
            });
        });
    },
    junitReporterSetup() {
        var jasmineReporters = require('jasmine-reporters');
        jasmine.getEnv().addReporter(new jasmineReporters.JUnitXmlReporter({
            consolidateAll: true,
            savePath: 'target',
            filePrefix: Math.random().toString(15) + 'test-result',
        }));
    },
    testRailSetup: function () {
        const trReporter = new TestRailReporter.Reporter(
            {
                hostname: configSetup.params.testrail.host,
                username: configSetup.params.testrail.user, // AdUserName or email Id
                password: configSetup.params.testrail.password, // Password with Ad Username and Token with email Id
                projectId: configSetup.params.testrail.projectId, // Testrail Project Id
                versionName: configSetup.params.testrail.versionName, // process.env.version || browser.params.version which can be passed using --params.version
                osName: platform, // e.g. Windows - Linux
                browserName: browserName,// e.g. Chrome/Mozilla
                planId: configSetup.params.testrail.planId,   // In Case if you want to update a specific plan
                milestoneNamePrefix: configSetup.params.testrail.milestoneNamePrefix, // Default - 'Automation milestone week'
                planNamePrefix: configSetup.params.testrail.planNamePrefix, // Default - 'Automation Test Plan'
            }); // e.g. Chrome/Mozilla,
        jasmine.getEnv().addReporter(trReporter);
    },
    configureAllReporters: function () {
        commonConfigSetup.allureReporterSetup();
        commonConfigSetup.junitReporterSetup();
        commonConfigSetup.allureEnvPropsAdder();
        return commonConfigSetup.onPrepareSetup();
    }
};

module.exports = commonConfigSetup;
